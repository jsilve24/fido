[{"path":"https://jsilve24.github.io/fido/articles/introduction-to-fido.html","id":"an-introduction-to-fido","dir":"Articles","previous_headings":"","what":"An introduction to fido","title":"Introduction to fido::Pibble","text":"fido (Justin D. Silverman et al. 2019) loose acronym “(Bayesian) Multinomial Logistic-Normal Models”. particular development fido stems need fast inference time-invariant MALLARD models(Justin D. Silverman et al. 2018). fido fast! uses closed form solutions model gradients Hessians written C++ preform MAP estimation combination parameter uncertainty estimation using Laplace Approximation. One main models fido function pibble fits Multinomial Logistic-Normal Linear Regression model. fido model exactly? First let give broad description 10,000ft : Basically model multinomial count data (e.g., sample contains counts \\(D\\) “types things”). Importantly, unlike common Poisson count models, multinomial models “competition counted” (.e., cases counting one type thing means less resources available count types things). may seem vague let give example. Pretend ball pit red, green, blue balls. Pretend ball pit large don’t know total number balls ball pit, yet want say something relative number red, blue, green balls pit. One way may choose measure ball pit grabbing armful balls counting number balls color (e.g., one armful may collect 5 red, 3 blue, 6 green). arms can contain many balls (example 14) (randomly) gotten another green ball armful (making 7 total) likely able measure one red blue balls; hence “competition counted”. turns type sampling occurs time many situations (Wikipedia example political polling). Perhaps one notable examples type count data occurs modern high-throughput sequencing studies 16S rRNA studies profile microbial communities bulk/single-cell RNA-seq studies study expression profiles cells. cases, transcripts sequenced number different types transcripts counted. important part sequencing samples small portion total genetic material available leads similar competition counted.","code":""},{"path":"https://jsilve24.github.io/fido/articles/introduction-to-fido.html","id":"the-pibble-model","dir":"Articles","previous_headings":"An introduction to fido","what":"The pibble model","title":"Introduction to fido::Pibble","text":"Pibble one type fido model. particular fido model multivariate linear regression. Let \\(Y\\) denote \\(D\\times N\\) matrix counts. Let us denote \\(j\\)-th column \\(Y\\) \\(Y_j\\). Thus “sample” dataset measurement relative amount \\(D\\) “types things”. Suppose also covariate information form \\(Q\\times N\\) matrix \\(X\\). following pibble model including likelihood priors: \\[ \\begin{align} Y_j & \\sim \\text{Multinomial}\\left(\\pi_j \\right)  \\\\ \\pi_j & = \\phi^{-1}(\\eta_j) \\\\ \\eta_j &\\sim N(\\Lambda X_j, \\Sigma) \\\\ \\Lambda &\\sim  MN_{(D-1) \\times Q}(\\Theta, \\Sigma, \\Gamma) \\\\ \\Sigma &\\sim W^{-1}(\\Xi, \\upsilon) \\end{align} \\] \\(MN_{(D-1) \\times Q}\\) denotes Matrix Normal distribution matrix \\(\\Lambda\\) regression coefficients dimension \\((D-1)\\times Q\\). Essentially can think Matrix normal two covariance matrices one describing covariation rows \\(\\Lambda\\) (\\(\\Sigma\\)) another describing covariation columns \\(\\Lambda\\) (\\(\\Gamma\\)). \\(W^{-1}\\) refers Inverse Wishart distribution (common distribution covariance matrices). line \\(\\pi_j = \\phi^{-1}(\\eta_j)\\) represents transformation parameters \\(\\pi_j\\) exist simplex (e.g., \\(\\pi_j\\) must sum 1) transformed parameters \\(\\eta_j\\) exist real space. particular define \\(\\phi^{-1}\\) inverse additive log ratio transform (conversely implies \\(\\eta_j = ALR(\\pi_j)\\)) also known identified softmax transform (commonly known Machine Learning community). say later tutorial, one thing know model implemented using ALR transform computationally simple fast; results model can viewed number transforms used (instead ALR) including isometric log-ratio transform, centered log-ratio transform. moving , like give intuitive description pibble. Essentially main modeling component pibble third equation (\\(\\eta_j \\sim N(\\Lambda X_j, \\Sigma)\\)) just multivariate linear model. , \\(X\\) covariates (can continuous, discrete, binary, etc…), \\(\\Sigma\\) covariance matrix regression residuals.","code":""},{"path":"https://jsilve24.github.io/fido/articles/introduction-to-fido.html","id":"example-analysis-of-microbiome-data","dir":"Articles","previous_headings":"","what":"Example analysis of microbiome data","title":"Introduction to fido::Pibble","text":"analysis presented fido manuscript (Justin D. Silverman et al. 2019). reanalyze previously published study comparing microbial composition terminal ileum subjects Crohn’s Disease (CD) healthy controls (Gevers et al. 2014). fit pibble model using CD status, inflammation status age covariates (plus constant intercept term). Create Design Matrix OTU Table Next specify priors. going start specifying prior covariance log-ratios \\(\\Sigma\\). like thinking prior covariance taxa log-scale (.e., log absolute abundances log-ratios). refer covariance log-absolute abundances \\(\\Omega\\). example, build prior states mean \\(\\Omega\\) identity matrix \\(I_D\\). Aitchison (1986), know assume taxa covariance \\(\\Omega\\) terms log-absolute abundance correlation \\(\\text{ALR}_D\\) given \\[ \\Sigma = G \\Omega G^T \\] \\(G\\) \\(D-1 \\times D\\) matrix given \\(G = [I_{D-1}; -1_{D-1}]\\) (.e., \\(G\\) \\(\\text{ALR}_D\\) contrast matrix). Additionally, know Inverse Wishart mode given \\(\\frac{\\Xi}{\\upsilon + D}\\). Finally, note \\(\\upsilon\\) essentially controls uncertainty \\(\\Sigma\\) prior mean. take \\(\\upsilon = D+3\\). gives us \\(\\Xi = (\\upsilon - D) GIG^T\\). scale \\(\\Xi\\) factor 1/2 make \\(Tr(\\Xi)=D-1\\). Finally specify priors \\(\\Theta\\) (mean \\(\\Lambda\\)) \\(\\Gamma\\) (covariance columns \\(\\Lambda\\); .e., covariance covariates). center prior \\(\\Lambda\\) zero, assume covariates independent. strongly recommend users perform prior predictive checks make sure priors make sense . fido makes easy, main fitting functions (e.g., pibble) automatically sample prior predictive distribution Y left NULL (e.g., without data posterior just prior). main fitting functions fido package output special fit objects (e.g., pibble outputs object class pibblefit). fit objects just lists extra metadata allows special method dispatch. example, call print pibblefit object get nice summary object. Note: Currently, function pibble takes expects inputs outputs “default” coordinate system; simply ALR coordinate system last category (49 ) taken reference (generalized future versions). specifically vector \\(x\\) representing proportions categories \\(\\{1, \\dots, D\\}\\) can write \\[x^* = \\left( \\log \\frac{x_1}{x_D}, \\dots, \\log \\frac{x_{D-1}}{x_D}\\right).\\] mentioned however, designed fido work many different coordinate systems including ALR (respect category), CLR, ILR, proportions. help transform things coordinate systems written series transformation functions transform pibblefit object desired coordinate system. Importantly, pibblefit objects keep track coordinate system currently user need specify coordinate system want change . Keep mind covariance matrices represented proportions visualizations summaries based covariance matrices suppressed pibblefit objects proportions coordinate system. example, lets look viewing summary prior \\(\\Lambda\\) respect CLR coordinate system1. default summary function returns list (possible elements Lambda, Sigma, Eta) summarizing posterior parameter based quantiles mean (e.g., p2.5 0.025 percentile posterior distribution). type table may hard take due large , pibblefit objects also come default plotting option parameters. Also returned plot objects ggplot objects normal ggplot2 commands work . though going use one names functions pibblefit objects provide specific names covariates (helpful plot).  looks fairly reasonable . going go ahead fit model data. fido provides helper method called refit use avoid passing prior parameters . Unlike main pibble function, refit method can called objects coordinate system transformations default coordinate system handled internally2. one nice thing using refit method. said, new objects added pibblefit object need added proper coordinates example, wanted replace prior \\(\\Xi\\) object CLR coordinates, transform prior Xi CLR coordinates adding priors object. Now also going add taxa names make easier interpret results. anything else lets look posterior predictive distribution assess model fit. can accessed method ppc3.  things note plot. First, zoomed like looks hard make much . fairly large dataset analyzing hard view uncertainty interval; case plotting median 95% confidence interval grey black observed counts green. fido also simpler function summarizes posterior predictive check. see model appears fitting well (least based posterior predictive check) 1.5% observations fall outside 95% posterior predictive density (good). readers look ppc plots think “looks like -fitting”. However, note two ways using ppc. One predict counts based samples \\(\\eta\\) (Eta; ); predict “scratch” predict starting form posterior samples \\(\\Lambda\\) (Lambda) sampling \\(\\eta\\) sampling \\(Y\\). later functionality can accessed also passing parameters from_scratch=TRUE ppc function. Note: two posterior predictive checks different meanings, one better .  Now going finally look posterior distribution regression parameters, many focus just 95% credible interval including zero (.e., model fairly certain non-zero). also going ignore intercept term just look parameters associated age disease status.  first, obvious ting notice covariate age pretty much effect , whatever effect may incredibly weak. going remove age plot just look coordinates non-zero effect diagnosis CD","code":"library(MicrobeDS) library(phyloseq) library(dplyr) library(fido)  set.seed(899)  data(\"RISK_CCFA\") # drop low abundant taxa and samples dat <- RISK_CCFA %>%    subset_samples(disease_stat!=\"missing\",                   immunosup!=\"missing\") %>%    subset_samples(diagnosis %in% c(\"no\", \"CD\")) %>%    subset_samples(steroids==\"false\") %>%    subset_samples(antibiotics==\"false\") %>%    subset_samples(biologics==\"false\") %>%    subset_samples(biopsy_location==\"Terminal ileum\") %>%    tax_glom(\"Family\") %>%    prune_samples(sample_sums(.) >= 5000,.) %>%   filter_taxa(function(x) sum(x > 3) > 0.10*length(x), TRUE) sample_dat <- as.data.frame(as(sample_data(dat),\"matrix\")) %>%    mutate(age = as.numeric(as.character(age)),          diagnosis = relevel(factor(diagnosis, ordered = FALSE), ref=\"no\"),           disease_stat = relevel(factor(disease_stat, ordered = FALSE), ref=\"non-inflamed\")) X <- t(model.matrix(~diagnosis + disease_stat+age, data=sample_dat)) Y <- otu_table(dat)  # Investigate X and Y look like X[,1:5] #>                      1939.SKBTI.0175 1939.SKBTI047 1939.SKBTI051 1939.SKBTI063 #> (Intercept)                  1.00000       1.00000          1.00       1.00000 #> diagnosisCD                  1.00000       1.00000          1.00       1.00000 #> disease_statinflamed         0.00000       1.00000          1.00       1.00000 #> age                         15.16667      14.33333         15.75      13.58333 #>                      1939.SKBTI072 #> (Intercept)                   1.00 #> diagnosisCD                   1.00 #> disease_statinflamed          1.00 #> age                          15.75 Y[1:5,1:5] #> OTU Table:          [5 taxa and 5 samples] #>                      taxa are rows #>         1939.SKBTI.0175 1939.SKBTI047 1939.SKBTI051 1939.SKBTI063 1939.SKBTI072 #> 4442127               0             9             0            14             2 #> 74305                 1             2            35             1             0 #> 663573               36             1             0             2             1 #> 2685602              10           264           211           276            83 #> 4339819               0            37            42            70            22 upsilon <- ntaxa(dat)+3  Omega <- diag(ntaxa(dat)) G <- cbind(diag(ntaxa(dat)-1), -1) Xi <- (upsilon-ntaxa(dat))*G%*%Omega%*%t(G) Theta <- matrix(0, ntaxa(dat)-1, nrow(X)) Gamma <- diag(nrow(X)) priors <- pibble(NULL, X, upsilon, Theta, Gamma, Xi)   print(priors) #>  pibblefit Object (Priors Only):  #>   Number of Samples:      250  #>   Number of Categories:       49  #>   Number of Covariates:       4  #>   Number of Posterior Samples:    2000  #>   Contains Samples of Parameters:Eta  Lambda  Sigma #>   Coordinate System:      alr, reference category: 49 priors <- to_clr(priors)   summary(priors, pars=\"Lambda\", gather_prob=TRUE, as_factor=TRUE, use_names=TRUE)   #> $Lambda #> # A tibble: 784 x 9 #>    Parameter coord covariate         val .lower .upper .width .point .interval #>    <chr>     <int>     <int>       <dbl>  <dbl>  <dbl>  <dbl> <chr>  <chr>     #>  1 Lambda        1         1  0.0509     -0.528  0.596    0.5 mean   qi        #>  2 Lambda        1         2  0.00199    -0.567  0.575    0.5 mean   qi        #>  3 Lambda        1         3 -0.0373     -0.620  0.532    0.5 mean   qi        #>  4 Lambda        1         4 -0.00205    -0.554  0.549    0.5 mean   qi        #>  5 Lambda        2         1  0.00991    -0.564  0.535    0.5 mean   qi        #>  6 Lambda        2         2 -0.00000782 -0.572  0.580    0.5 mean   qi        #>  7 Lambda        2         3 -0.0247     -0.570  0.518    0.5 mean   qi        #>  8 Lambda        2         4  0.0165     -0.536  0.589    0.5 mean   qi        #>  9 Lambda        3         1  0.0138     -0.584  0.620    0.5 mean   qi        #> 10 Lambda        3         2 -0.00502    -0.542  0.581    0.5 mean   qi        #> # ... with 774 more rows names_covariates(priors) <- rownames(X) p <- plot(priors, par=\"Lambda\")  #> Scale for 'colour' is already present. Adding another scale for 'colour', which will #> replace the existing scale. p + ggplot2::xlim(c(-10, 10)) priors$Y <- Y # remember pibblefit objects are just lists posterior <- refit(priors, optim_method=\"lbfgs\") tax <- tax_table(dat)[,c(\"Class\", \"Family\")] tax <- apply(tax, 1, paste, collapse=\"_\") names_categories(posterior) <- tax ppc(posterior) + ggplot2::coord_cartesian(ylim=c(0, 30000)) ppc_summary(posterior) #> Proportions of Observations within 95% Credible Interval: 0.9898776 ppc(posterior, from_scratch=TRUE) +ggplot2::coord_cartesian(ylim=c(0, 30000)) ppc_summary(posterior, from_scratch=TRUE) #> Proportions of Observations within 95% Credible Interval: 0.9721633 posterior_summary <- summary(posterior, pars=\"Lambda\")$Lambda focus <- posterior_summary[sign(posterior_summary$p2.5) == sign(posterior_summary$p97.5),] focus <- unique(focus$coord) plot(posterior, par=\"Lambda\", focus.coord = focus, focus.cov = rownames(X)[2:4]) #> Scale for 'colour' is already present. Adding another scale for 'colour', which will #> replace the existing scale. posterior_summary <- filter(posterior_summary, covariate==\"diagnosisCD\")  focus <- posterior_summary[sign(posterior_summary$p2.5) == sign(posterior_summary$p97.5),] focus <- unique(focus$coord)  tax_table(dat)[taxa_names(dat)[which(names_coords(posterior) %in% focus)]] #> Taxonomy Table:     [12 taxa by 7 taxonomic ranks]: #>         Kingdom    Phylum           Class                   Order               #> 74305   \"Bacteria\" \"Proteobacteria\" \"Epsilonproteobacteria\" \"Campylobacterales\" #> 4449236 \"Bacteria\" \"Proteobacteria\" \"Betaproteobacteria\"    \"Burkholderiales\"   #> 1105919 \"Bacteria\" \"Proteobacteria\" \"Betaproteobacteria\"    \"Burkholderiales\"   #> 4477696 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\"   \"Pasteurellales\"    #> 4448331 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\"   \"Enterobacteriales\" #> 4154872 \"Bacteria\" \"Bacteroidetes\"  \"Flavobacteriia\"        \"Flavobacteriales\"  #> 4452538 \"Bacteria\" \"Fusobacteria\"   \"Fusobacteriia\"         \"Fusobacteriales\"   #> 341322  \"Bacteria\" \"Firmicutes\"     \"Bacilli\"               \"Turicibacterales\"  #> 1015143 \"Bacteria\" \"Firmicutes\"     \"Bacilli\"               \"Gemellales\"        #> 176318  \"Bacteria\" \"Firmicutes\"     \"Clostridia\"            \"Clostridiales\"     #> 1788466 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"            \"Clostridiales\"     #> 1896700 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"            \"Clostridiales\"     #>         Family                  Genus Species #> 74305   \"Helicobacteraceae\"     NA    NA      #> 4449236 \"Alcaligenaceae\"        NA    NA      #> 1105919 \"Oxalobacteraceae\"      NA    NA      #> 4477696 \"Pasteurellaceae\"       NA    NA      #> 4448331 \"Enterobacteriaceae\"    NA    NA      #> 4154872 \"[Weeksellaceae]\"       NA    NA      #> 4452538 \"Fusobacteriaceae\"      NA    NA      #> 341322  \"Turicibacteraceae\"     NA    NA      #> 1015143 \"Gemellaceae\"           NA    NA      #> 176318  \"Christensenellaceae\"   NA    NA      #> 1788466 \"Lachnospiraceae\"       NA    NA      #> 1896700 \"Peptostreptococcaceae\" NA    NA plot(posterior, par=\"Lambda\", focus.coord = focus, focus.cov = rownames(X)[2]) #> Scale for 'colour' is already present. Adding another scale for 'colour', which will #> replace the existing scale."},{"path":[]},{"path":"https://jsilve24.github.io/fido/articles/introduction-to-fido.html","id":"a-few-notes-on-model-inference-and-parameter-collapsing","dir":"Articles","previous_headings":"More Technical Details","what":"A few notes on model inference and parameter collapsing","title":"Introduction to fido::Pibble","text":"Along algorithmic speed-ups enabled C++ Eigen library fido uses conjugate priors regression component model allowing last three lines model collapsed 1 line. last three lines model can re-expanded using fully conjugate sampling schemes require optimization MCMC (matrix operations). details: collapsed model given \\[ \\begin{align} Y_j & \\sim \\text{Multinomial}\\left(\\pi_j, n_j\\right)  \\\\ \\pi_j & = \\phi^{-1}(\\eta_j) \\\\ \\eta_j &\\sim T_{(D-1)\\times N}(\\upsilon, \\Theta X, \\Xi, I_N + X^T \\Gamma X) \\end{align} \\] \\(=(I_N + X^T \\Gamma, X)^{-1}\\) \\(T_{(D-1)\\times N}\\) refers Matrix T-distribution \\((D-1)\\times N\\) matrix \\(\\eta\\) log density given \\[\\log T_{(D-1)\\times N}(\\eta | \\upsilon, \\Theta X, \\Xi, ) \\propto -\\frac{\\upsilon+N-D-2}{2}\\log | I_{D-1}+\\Xi^{-1}(\\eta-\\Theta X)(\\eta-\\Theta X)^T |.\\] Rather using MCMC sample \\(\\eta\\) fido uses MAP estimation. Additionally, fido allows quantification uncertainty MAP estimates using Laplace approximation. found practice MAP based Laplace approximation produced comparable results full MCMC sampler tremendous improvements compute time. samples \\(\\eta\\) produced using Laplace approximation closed form solutions conditional density \\(\\Lambda\\) \\(\\Sigma\\) given \\(\\eta\\) used “uncollapse” collapsed model produce posterior samples target model. uncollapsing fast given following matrix equations: \\[ \\begin{align} \\upsilon_N &= \\upsilon+N \\\\ \\Gamma_N &= (XX^T+\\Gamma^{-1})^{-1} \\\\ \\Theta_N &= (\\eta X^T+\\Theta\\Gamma^{-1})\\Gamma_N \\\\ \\Xi_N &= \\Xi + (\\eta - \\Theta_N X)(\\eta - \\Theta_N X)^T + (\\Theta_N - \\Theta)\\Gamma(\\Theta_N- \\Theta)^T \\\\ p(\\Sigma | \\eta, X) &= W^{-1}(\\Xi_N, \\upsilon_N)\\\\ p(\\Lambda | \\Sigma, \\eta, X) &= MN_{(D-1)\\times Q}(\\Lambda_N, \\Sigma, \\Gamma_N). \\end{align} \\] Laplace approximation slow, unstable (see ) simply needed, default behavior pibble preform matrix calculations produce single point estimate \\(\\Sigma\\) \\(\\Lambda\\) based posterior means \\(p(\\Sigma | \\eta, X)\\) \\((\\Lambda | \\Sigma, \\eta, X)\\).","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/articles/mitigating-pcrbias.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Example of using Fido for measuring and mitigating PCR Bias","text":"PCR bias can measured corrected combining specially designed calibration curve statistical models. figure gives brief overview calibration experiment. brief, samples pooled create “calibration sample”. calibration sample contains DNA every taxa study. calibration sample split multiple aliquots amplified varying number cycles. sequence resulting samples along original samples. turn modeling (focus vignette).  manuscript, show PCR bias well approximated simple multiplicative process. translated sequence count data, means PCR bias represents linear process log-ratio space: just need multinomial logistic-normal linear models (aka pibble models fido package). set model correctly PCR bias just linear model: bias parameter amount bias seen given sample parameter times number PCR cycles sample underwent prior sequencing. case estimate unbiased composition sample just becomes unique intercept sample (technical / biological replicates replicates share intercept; demonstrate well). Another way think want estimate composition number PCR cycles equal zero (aka intercept).","code":""},{"path":"https://jsilve24.github.io/fido/articles/mitigating-pcrbias.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An Example","title":"Example of using Fido for measuring and mitigating PCR Bias","text":"show example data (including calibration samples can modeled). mock community data analyzed manuscript. Lets first take brief look data. two objects Y (count table already preprocessed just manuscript) metadata contains covariates need (including number PCR cycles sample undergone). non-obvious variable probably machine just categorical variable denoting 4 different PCR machines used amplify given sample. writing paper, thought might source bias included term model (just demonstrate ). fido doesn’t yet formula interface (write eventually), just need use formula interface provided base-R’s model.matrix function. can see created design matrix encoded PCR machine using series 3 dummy variables. also series dummy variables denoting samples biologically unique (e.g., sample_num). -1 formula just tells R unique intercept biological sample (e.g., use one-hot-encoding rather dummy encoding used PCR machines). Next going specify model priors fit model. detailed description general thought process like follow creating priors fido provided vignette Tips Specifying Priors. just going simple prior just change Gamma default values. wondering, manuscript choose multiplier 10 based maximum marginal likelihood. end vignette show example can done. Next going transform results CLR coordinates interpret space. ’s . Now just interpreting model results. Lets say want investigate estimated unbiased composition, just look inferred random intercepts corresponding sample_num variable. can plot results simply enough:  compositional bias introduced cycle can also visualized.  fido package bunch tools working fitted models depending ultimately want . See main pibble vignette fuller description can fitted models. One plot find particularly useful, visualizing calibration data fitted bias model. can done follows:  two things look plots. First, data look linear space. data look linear options: () something went wrong calibration experiment, (b) something wrong code plotting calibration data, (c) theory prior experiments wrong PCR bias well approximated log-ratio linear. Second, look make sure model good job fitting data. Just remember data sources variation model accounting plotting. example, batch variation (think PCR machine variable included ). also zeros; just add pseudo-count transform data, internally fido actually modeling zeros appropriate pseudo-count.","code":"library(fido) library(dplyr) library(tidyr) library(ggplot2)  set.seed(5903) # First load the data data(pcrbias_mock) Y[1:5,1:5] #>               cycle13.1 cycle13.2 cycle13.3 cycle14.1 cycle14.2 #> B.longum             27        28        22        37        44 #> B.subtilis          320       299       272       513       650 #> C.aerofaciens        35        32        39        43        84 #> C.hathewayi          61        52        59        93       117 #> C.innocuum          121        91       112       197       208  head(metadata) #>   sample_name  sample_num cycle_num machine #> 1   cycle13.1 Calibration        13       3 #> 2   cycle13.2 Calibration        13       3 #> 3   cycle13.3 Calibration        13       3 #> 4   cycle14.1 Calibration        14       4 #> 5   cycle14.2 Calibration        14       4 #> 6   cycle14.3 Calibration        14       4 X <- t(model.matrix(~ cycle_num + sample_num + machine  -1, data = metadata)) X[,1:5] #>                        1  2  3  4  5 #> cycle_num             13 13 13 14 14 #> sample_numCalibration  1  1  1  1  1 #> sample_numMock1        0  0  0  0  0 #> sample_numMock10       0  0  0  0  0 #> sample_numMock2        0  0  0  0  0 #> sample_numMock3        0  0  0  0  0 #> sample_numMock4        0  0  0  0  0 #> sample_numMock5        0  0  0  0  0 #> sample_numMock6        0  0  0  0  0 #> sample_numMock7        0  0  0  0  0 #> sample_numMock8        0  0  0  0  0 #> sample_numMock9        0  0  0  0  0 #> machine2               0  0  0  0  0 #> machine3               1  1  1  0  0 #> machine4               0  0  0  1  1 fit <- pibble(Y = Y, X=X, Gamma = 10*diag(nrow(X))) fit <- to_clr(fit) # pull out indices for random intercepts corresponding to `sample_num` focus.covariate <- rownames(X)[which(grepl(\"sample_num\", rownames(X)))]  # Also just so the plot fits nicely in Rmarkdown we are also going to just  # plot a few of the taxa focus.coord <- paste0(\"clr_\", c(\"S.gallolyticus\", \"R.intestinalis\", \"L.ruminis\"))   # Also to make the plot fit nicely, I just flip the orientation of the plot  plot(fit, par=\"Lambda\", focus.cov=focus.covariate, focus.coord=focus.coord) +   theme(strip.text.y=element_text(angle=0, hjust=1)) +   facet_grid(.data$covariate~.) #> Scale for 'colour' is already present. Adding another scale for 'colour', which will #> replace the existing scale. # Also to make the plot fit nicely, I just flip the orientation of the plot  plot(fit, par=\"Lambda\", focus.cov=\"cycle_num\") #> Scale for 'colour' is already present. Adding another scale for 'colour', which will #> replace the existing scale. # First transform the data into CLR coordinates (requires pseudo-count to deal with # zeros). Then will convert to tidy format for ggplot  tidy_calibration <- clr_array(Y+0.5, 1) %>% # transform to CLR   as.data.frame() %>%    select(starts_with(\"cycle\")) %>%  # select only samples from the calibration   t() %>%    as.data.frame() tidy_calibration$sample_name <- rownames(tidy_calibration) tidy_calibration <- tidy_calibration %>%    gather(coord, val, -sample_name) %>%    mutate(coord = as.numeric(substr(coord, 2, 4))) %>%    left_join(metadata, by=\"sample_name\") %>%    mutate(coord = names_coords(fit)[coord])     # Now the important part - lets grab the pibble result of interest X.tmp <- matrix(0, nrow(X), 2) # Create fake covariate data to predict the regression line based on  rownames(X.tmp) <- rownames(X) X.tmp[\"cycle_num\",2] <- 35 X.tmp[\"sample_numCalibration\",] <- 1 X.tmp # simple, just going to predict the composition for each of these two samples #>                       [,1] [,2] #> cycle_num                0   35 #> sample_numCalibration    1    1 #> sample_numMock1          0    0 #> sample_numMock10         0    0 #> sample_numMock2          0    0 #> sample_numMock3          0    0 #> sample_numMock4          0    0 #> sample_numMock5          0    0 #> sample_numMock6          0    0 #> sample_numMock7          0    0 #> sample_numMock8          0    0 #> sample_numMock9          0    0 #> machine2                 0    0 #> machine3                 0    0 #> machine4                 0    0       # for the plot  # Now predict the fitted regression line for cycle_num using X.tmp predicted <- predict(fit, newdata=X.tmp, summary=TRUE) %>%    mutate(cycle_num = c(0, 35)[sample])  # now plot  predicted %>%    ggplot(aes(x=cycle_num)) +   geom_ribbon(aes(ymin=p2.5, ymax=p97.5), fill=\"darkgrey\") +   geom_line(aes(y=mean)) +   geom_point(data=tidy_calibration, aes(y=val)) +   facet_grid(coord~.) +   theme_bw() +   theme(strip.text.y=element_text(angle=0)) +   ylab(\"CLR Coordinates\")"},{"path":"https://jsilve24.github.io/fido/articles/mitigating-pcrbias.html","id":"using-maximum-marginal-likelihood-to-estimate-a-scale-of-gamma","dir":"Articles","previous_headings":"","what":"Using Maximum Marginal Likelihood to estimate a scale of Gamma","title":"Example of using Fido for measuring and mitigating PCR Bias","text":"chose prior gamma diagonal matrix multiplied factor 10. choose 10? manuscript used something called maximum marginal likelihood. Essentially refit model different values (just 10) saw one fit data best (one highest marginal likelihood). example can done. notice essentially model tells us just want really big value sigma. ? actually corresponds situation multinomial alone enough explain variation technical replicates. happens occasionally. also see log marginal likelihood pretty much assemptotes around 10. rather picking 100000, just settled 10 numerically stable just seemed reasonable. model basically just says: “don’t choose value less 10”.","code":"sigma <- c(1, 2, 3, 10, 100, 1000) # candidate values  lml <- rep(NA, length(sigma)) # log marginal likelihood for (i in seq_along(sigma)){   fit <- pibble(Y=Y, X=X, Gamma = sigma[i]*diag(nrow(X)))   lml[i] <- fit$logMarginalLikelihood # this is calculated automatically by fido } base::plot(sigma, lml)"},{"path":"https://jsilve24.github.io/fido/articles/non-linear-models.html","id":"fidobasset-the-model","dir":"Articles","previous_headings":"","what":"fido::basset, the model","title":"Non-linear models with fido::basset","text":"fido can used non-linear modeling. going go one model based multivariate Gaussian processes. Gaussian processes type lazy learner, named model lazy dog: Basset Hound. Hence model called basset. basset model can written \\[ \\begin{align} Y_j & \\sim \\text{Multinomial}\\left(\\pi_j \\right)  \\\\ \\pi_j & = \\phi^{-1}(\\eta_j) \\\\ \\eta &\\sim N(\\Lambda[X], \\Sigma, I_N) \\\\ \\Lambda[X] &\\sim  \\textsf{GP}(\\Theta[X], \\Sigma, \\Gamma[X]) \\\\ \\Sigma &\\sim W^{-1}(\\Xi, \\upsilon) \\end{align} \\] now label quantities interpreted function square brackets. particular, use notation \\(\\Lambda[X]\\) function maps \\(Q \\times N\\) matrix covariates \\(X\\) matrix \\(\\eta\\). \\(\\Lambda\\) can interpreted smooth function relates covariates \\(X\\) composition \\(\\eta\\) potentially non-linear manner. \\(\\Theta[X]\\) mean function evaluated \\(X\\), \\(\\Gamma[X]\\) covariance matrix (gram matrix) formed evaluating positive semi-definite kernel function \\(K\\) set points \\(\\) \\(j\\), .e., \\(\\Gamma_{ij} = K(X_i, X_j)\\). Many different possible kernel functions makes flexible powerful model.","code":""},{"path":"https://jsilve24.github.io/fido/articles/non-linear-models.html","id":"non-linear-time-series-modeling","dir":"Articles","previous_headings":"","what":"Non-linear time-series modeling","title":"Non-linear models with fido::basset","text":"demonstrate basset going reanalyze mallard1 dataset Silverman et al. (2018) provided phyloseq object fido. dataset features 4 artificial gut vessels sampled daily hourly 1 month many technical replicates. accord prior analyses (make easy visualize results) going just analyze bacterial families frequently observed. Note: full dataset (sequence variant level without preprocessing) available run data(mallard). simplicity just look samples vessel 12. function basset wrapper around fido internals make fitting model easy. basset patterned function pibble requires Theta Gamma given matrix functions rather matrices. Theta must function given X outputs \\(D-1 \\times N\\) matrix (just like give pibble) Gamma must function given X outputs \\(N \\times N\\) covariance matrix (e.g., covariance samples). kernel functions meet requirements Gamma fido already. use Squared Exponential (SE) kernel Gamma set Theta zero function. SE kernel give us non-linear smoothing observed time-series. Important Note: Currently, Theta must output matrix represented default coordinate system (\\(ALR_D\\)). may generalized future. just specify Kernel parameters manually, generally parameters can chosen cross-validation. turns basset really just creating pibblefit object little special represents posterior non-linear functions. benefit many methods available pibblefit objects work bassetfit objects. example, can use transformation methods:  Really basset shows power use smooth. Now going create visual shows observed data CLR coordinates (need add pseudo-count) along smoothed estimates.","code":"library(fido) library(dplyr) library(tidyr) library(ggplot2) data(mallard_family)  # Just take vessel 1 sample.ids <- mallard_family$sample_data[mallard_family$sample_data$Vessel == 1,] # Just take hourly samples sample.ids <- sample.ids[(sample.ids$time > \"2015-11-20 15:00:00 UTC\") & (sample.ids$time < \"2015-11-25 16:00:00 UTC\"),]  # Subsetting the sample data and OTU data subset.sample_data <- mallard_family$sample_data[mallard_family$sample_data$X.SampleID %in% sample.ids$X.SampleID,]  subset.otu_table <- mallard_family$otu_table[rownames(mallard_family$otu_table) %in% sample.ids$X.SampleID,]  # Order samples - to make plotting easy later o <- order(subset.sample_data$time) subset.otu_table <- subset.otu_table[o,] subset.sample_data <- subset.sample_data[o,]  # Extract Data / dimensions from Phyloseq object Y <- t(as(subset.otu_table, \"matrix\")) D <- nrow(Y) N <- nrow(subset.sample_data)  # X in hours X <- as.numeric(subset.sample_data$time) X <- t((X-min(X)) / 3600) # Specify Priors Gamma <- function(X) SE(X, sigma=5, rho=10) # Create partial function  Theta <- function(X) matrix(0, D-1, ncol(X)) upsilon <- D-1+3 Xi <- matrix(.4, D-1, D-1) diag(Xi) <- 1  # Now fit the model fit <- fido::basset(Y, X, upsilon, Theta, Gamma, Xi) #> No rows of X were specified. Using all rows... fit.clr <- to_clr(fit)  # Plot Sigma in CLR plot(fit.clr, par=\"Sigma\", focus.coord=c(\"clr_seq_6\", \"clr_seq_5\", \"clr_seq_2\")) # predict not just missing days but also forecast into future X_predict <- t(1:(max(X))) predicted <- predict(fit.clr, X_predict, jitter=1) family_names <- as(mallard_family$tax_table$Family, \"vector\") Y_clr_tidy <- clr_array(Y+0.65, parts = 1) %>%   gather_array(mean, coord, sample) %>%   mutate(time = X[1,sample],          coord = paste0(\"CLR(\", family_names[coord],\")\"))  predicted_tidy <- gather_array(predicted, val, coord, sample, iter) %>%   mutate(time = X_predict[1,sample]) %>%   filter(!is.na(val)) %>%   group_by(time, coord) %>%   summarise_posterior(val, na.rm=TRUE) %>%   ungroup() %>%   mutate(coord = paste0(\"CLR(\", family_names[coord],\")\"))  ggplot(predicted_tidy, aes(x = time, y=mean)) +   geom_ribbon(aes(ymin=p2.5, ymax=p97.5), fill=\"darkgrey\", alpha=0.5) +   geom_ribbon(aes(ymin=p25, ymax=p75), fill=\"darkgrey\", alpha=0.9)+   geom_line(color=\"blue\") +   geom_point(data = Y_clr_tidy, alpha=0.5) +   facet_wrap(~coord, scales=\"free_y\") +   theme_minimal()+   theme(axis.title.y = element_blank(),         axis.title.x = element_blank(),         axis.text.x = element_text(angle=45))"},{"path":[]},{"path":"https://jsilve24.github.io/fido/articles/orthus.html","id":"fidoorthus-the-model","dir":"Articles","previous_headings":"","what":"fido::orthus, the model","title":"Joint Modeling  (e.g., Multiomics) with fido::Orthus","text":"fido can used jointly modeling multivariate count data multivariate Gaussian data. example, reasonable model jointly model 16S microbiome data metabolomics data jointly. “two-headed” nature model, e.g., two observed data-sets, named model orthus, two-headed dog brother Cerberus Greek Mythology. orthus model can written \\[ \\begin{align} Y_j & \\sim \\text{Multinomial}\\left(\\pi_j \\right)  \\\\ \\pi_j & = \\phi^{-1}(\\eta_j) \\\\ \\begin{bmatrix}\\eta_j \\\\ Z_j \\end{bmatrix} &\\sim N(\\Lambda X, \\Sigma) \\\\ \\Lambda &\\sim  N(\\Theta, \\Sigma, \\Gamma) \\\\ \\Sigma &\\sim W^{-1}(\\Xi, \\upsilon) \\end{align} \\] Note looks nearly identical pibble model appended second (Gaussian) dataset (\\(Z\\)) onto \\(\\eta\\). , definition \\(\\Lambda\\) changes (now larger bottom rows dictating covariates \\(X\\) influence second dataset). Similarly, \\(\\Sigma\\) now much larger can though \\[ \\Sigma = \\begin{bmatrix} \\Sigma_{(\\eta, \\eta)} & \\Sigma_{(\\eta, Z)} \\\\                           \\Sigma_{(Z, \\eta)} & \\Sigma_{(Z, Z)}\\end{bmatrix} \\] \\(\\Sigma_{(\\eta, \\eta)}\\) describes covariance log-ratios (e.g., covariance among multinomial categories log-ratio space), \\(\\Sigma_{(Z, Z)}\\) describes covariance dimensions \\(Z\\) (e.g., metabolites Z metabolomics data), \\(\\Sigma_{(\\eta, Z)} = \\Sigma_{(Z, \\eta)}^T\\) represents covariance log-ratios dimensions \\(Z\\) (e.g., microbial taxa metabolites). Similar \\(\\Sigma\\) \\(\\Lambda\\), parameters \\(\\Xi\\) \\(\\Theta\\) undergo similar expansion accommodate second dataset.","code":""},{"path":"https://jsilve24.github.io/fido/articles/orthus.html","id":"joint-modeling-of-microbial-16s-data-and-metabolomics","dir":"Articles","previous_headings":"","what":"Joint modeling of Microbial 16S data and Metabolomics","title":"Joint Modeling  (e.g., Multiomics) with fido::Orthus","text":"demonstrate orthus perform toy analysis data Kashyap et al. (2013) made available Callahan et al. (2016) part recently published microbiome data analysis workflow (Callahan et al. 2016). follow data preprocessing Callahan et al. (2016) just don’t drop taxa instead amalgamate don’t pass filtering category called “”. maintain proper variance multinomial model. Now going just bit processing get data format orthus. Note extra metadata just going use intercept model time. Now going set priors. priors going similar pibble now need think prior covariance among metabolites metabolites log-ratios taxa. Remember, priors must defined \\(ALR_D\\) (e.g., ALR reference D-th taxa; may changed future make specifying priors user friendly). going form prior \\(\\Sigma\\) specifying \\(\\upsilon\\) \\(\\Xi\\). specify weak prior belief taxa independent terms log absolute abundance. can translate statement covariance log absolute abundance statement log-ratio covariance pre- post-multiplying \\(ALR_D\\) contrast matrix (refer \\(GG\\) ). Additionally, believe likely substantial covariance taxa metabolites assume metabolites likely independent.  Note structure prior, everything independent moderate positive covariance log-ratios based shared definition terms \\(D\\)-th taxa. parts prior less interesting. going state mean \\(\\Lambda\\) centered \\(\\mathbf{0}\\) signal--noise ratio data approximately 1 (later part specified \\(\\Gamma=\\)). Finally fit model. Next going transform log-ratios \\(ALR_D\\) \\(CLR\\). written transformation functions, e.g., to_clr etc… work orthusfit objects similar manner work pibblefit objects. orthusfit objects transform log-ratio components parameters leaving parts inferred model parameters (.e., parts associated metabolites) untouched.","code":"metab_path <- system.file(\"extdata/Kashyap2013\", \"metabolites.csv\", package=\"fido\") microbe_path <- system.file(\"extdata/Kashyap2013\", \"microbe.rda\", package=\"fido\") metab <- read.csv(metab_path, row.names = 1) metab <- as.matrix(metab) microbe <- get(load(microbe_path))  ## Preprocessing ## # Metabolite Preprocessing keep_ix <- rowSums(metab == 0) <= 3 metab <- metab[keep_ix, ]  # 16S Preprocesing - plus some weirdness to rename amalgamated category to \"other\" keep_ix <- taxa_sums(microbe) > 4 keep_ix <- keep_ix & (rowSums(otu_table(microbe)>2)>3) microbe <- merge_taxa(microbe, taxa_names(microbe)[!keep_ix]) nms <- taxa_names(microbe) rnm <- which(taxa_names(microbe)==taxa_names(microbe)[!keep_ix][1]) nms[rnm] <- \"other\" taxa_names(microbe) <- nms rm(nms, rnm)  # bit of preprocessing  metab <- log10(1 + metab) Y <- otu_table(microbe, taxa_are_rows=TRUE) Z <- metab #(metabolites are rows) X <- matrix(1, 1, phyloseq::nsamples(microbe))  # save dims for easy reference N <- ncol(Y) P <- nrow(Z) Q <- nrow(X) D <- nrow(Y) upsilon <- (D-1+P)+10 # weak-ish prior on covariance over joint taxa and metabolites Xi <- diag(D-1+P) GG <- cbind(diag(D-1), -1) Xi[1:(D-1), 1:(D-1)] <- GG%*%diag(D) %*% t(GG) Xi <- Xi * (upsilon-D-P) # this scales Xi to have the proper mean we wanted image(Xi) Gamma <- diag(Q) Theta <- matrix(0, D-1+P, Q) fit <- orthus(Y, Z, X, Theta=Theta, Gamma=Gamma, Xi=Xi, upsilon=upsilon, n_samples=1000) fit <- to_clr(fit) print(fit) #> orthusfit Object:  #>   Number of Samples:      12  #>   Number of Categories:       114  #>   Number of Zdimensions:  405  #>   Number of Covariates:       1  #>   Number of Posterior Samples:    1000  #>   Contains Samples of Parameters:Eta  Lambda  Sigma #>   Coordinate System:      clr"},{"path":"https://jsilve24.github.io/fido/articles/orthus.html","id":"investigate-model-results","dir":"Articles","previous_headings":"","what":"Investigate Model Results","title":"Joint Modeling  (e.g., Multiomics) with fido::Orthus","text":"ton ways visualize inferred model. make network diagrams relating taxa taxa, taxa metabolites metabolites metabolites. look low dimensional representation joint covariance create something much akin canonical correlation analysis (CCA). look well metabolites predict taxa vice-versa. sake simplicity something much simpler. just going find list taxa metabolite covariances model confident . looks hundred covariances can fairly confident .","code":"# First just look ath the cross-covariances fit by the model # (covariance between taxa in CLR coordinates and metabolites) # This requires that we extract the corner of Sigma.  xcor <- fit$Sigma[1:D, D:(D-1+P),]  # Initial preprocessing to speed up computation of posterior intervals # As there are a lot of cross-covariance terms we are going to first  # weed down the list of things we have to look at by first pass  # selecting only those taxa that have a large posterior mean for the covariance xcor.mean <- apply(xcor, c(1,2), mean) to.analyze <- fido::gather_array(xcor.mean, cov, taxa, metabolite) %>%    arrange(-abs(cov)) %>%    .[1:1000,] %>%    mutate(tm =paste0(taxa, \"_\", metabolite))  # Subset Covariance to those we are interested in and calculate posterior  # confidence intervals.  xcor.summary <- fido::gather_array(xcor, cov, taxa, metabolite, iter) %>%   mutate(tm=paste0(taxa, \"_\", metabolite)) %>%    filter(tm %in% to.analyze$tm) %>%    mutate(taxa = rownames(Y)[taxa], metabolite = rownames(Z)[metabolite]) %>%    group_by(taxa, metabolite) %>%    fido:::summarise_posterior(cov) %>%    arrange(mean) %>%    filter(taxa != 'other') # we don't care about these  # Select those covariances where the model has high certainty (95%) that # the true covariance is not zero.  xcor.summary %>%    filter(sign(p2.5)==sign(p97.5)) %>%    filter(abs(mean) > 2) #> # A tibble: 218 x 8 #> # Groups:   taxa [17] #>    taxa  metabolite   p2.5   p25   p50  mean   p75  p97.5 #>    <chr> <chr>       <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #>  1 722   206.0445922 -6.55 -3.96 -3.08 -3.33 -2.32 -1.51  #>  2 7816  206.0445922 -5.63 -3.23 -2.45 -2.65 -1.85 -1.05  #>  3 722   290.9298419 -5.18 -3.09 -2.42 -2.62 -1.85 -1.23  #>  4 18182 380.1846197 -5.20 -3.07 -2.38 -2.55 -1.83 -1.03  #>  5 722   181.4504354 -5.19 -3.04 -2.36 -2.55 -1.80 -1.13  #>  6 722   177.0565368 -4.98 -3.01 -2.30 -2.50 -1.78 -1.08  #>  7 722   180.072273  -5.03 -3.06 -2.30 -2.49 -1.71 -0.986 #>  8 19517 380.1846197 -5.15 -3.06 -2.33 -2.49 -1.71 -0.952 #>  9 2943  380.1846197 -4.89 -2.97 -2.34 -2.49 -1.83 -1.03  #> 10 722   176.0343919 -4.93 -2.95 -2.25 -2.48 -1.79 -1.09  #> # ... with 208 more rows"},{"path":"https://jsilve24.github.io/fido/articles/orthus.html","id":"qualifications-and-caution","dir":"Articles","previous_headings":"","what":"Qualifications and Caution","title":"Joint Modeling  (e.g., Multiomics) with fido::Orthus","text":"Please note, performed analysis demonstrate use orthus model repeatedly asked . think cool model quite useful right circumstances. like point philosophical points analysis performed . First, performed analysis just demonstrate orthus. really don’t know data showcased . metabolite 206.0445922? idea. reason metabolites dataset named. reason left taxa indexed sequence variant number. Second (important), identifying relationships taxa metabolites (two high-dimensional multivariate data-sets) really difficult! looking just 114 taxa 405 leads 46170 possible covariances 12 samples! Yes orthus Bayesian model, Yes, Bayesian models can quite useful parameters samples, limit reasonability. Really, Bayesian models great can perfectly capture prior beliefs prior. often can really done perfectly? caution users, use orthus carefully. Consider metabolites taxa really care can, isolate analyses . Alright, ’s probably enough philosophizing R package Vignette. hope enjoy orthus.","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Picking Priors","text":"Picking priors important difficult part Bayesian statistics. vignette intended introduction Bayesian statistics, assume readers already know prior/posterior . Just review, prior probability distribution representing analysts belief model parameters prior seeing data. posterior (sense optimal) probability distribution representing belief seen data (given prior beliefs). Since priors represent analysts belief prior seeing data, makes sense priors often specific given study. example, don’t necessarily believe parameters learned RNA-seq data analysis someone studying microbial communities political gerrymandering. ’s , probably different prior beliefs depending microbial community studying study set . (least) two important reasons think carefully priors. First, meaning posterior conditioned prior accurately reflecting beliefs. posterior represents optimal belief given data given prior beliefs. specified prior reflect beliefs well prior won’t right meaning. course priors imperfect best can. Second, practical note, really weird priors can lead numerical issues optimization uncertainty quantification fido. later problem can appear failure reach MAP estimate error trying invert Hessian. Overall, prior single function (probability distribution) specified jointly parameters interest. Still, can confusing think prior joint form. instead try simplify break prior distinct components. numerous models fido, focus prior pibble model , opinion, heart fido. Just review, pibble model given : \\[ \\begin{align} Y_j & \\sim \\text{Multinomial}\\left(\\pi_j \\right)  \\\\ \\pi_j & = \\phi^{-1}(\\eta_j) \\\\ \\eta_j &\\sim N(\\Lambda X_j, \\Sigma) \\\\ \\Lambda &\\sim  N(\\Theta, \\Sigma, \\Gamma) \\\\ \\Sigma &\\sim W^{-1}(\\Xi, \\upsilon). \\end{align} \\] consider first two lines part likelihood bottom three lines part prior. Therefore following three components prior: prior \\(\\Sigma\\): \\(\\Sigma \\sim W^{-1}(\\Xi, \\upsilon)\\) prior \\(\\Lambda\\): \\(\\Lambda \\sim  N(\\Theta, \\Sigma, \\Gamma)\\) prior \\(\\eta_j\\): \\(\\eta_j \\sim N(\\Lambda X_j, \\Sigma)\\)","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"background-on-the-matrix-normal","dir":"Articles","previous_headings":"","what":"Background on the Matrix Normal","title":"Picking Priors","text":"three things explain going forward. vec operation, Kronecker product, matrix normal. first two needed understand matrix-normal.","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"the-vec-operation","dir":"Articles","previous_headings":"Background on the Matrix Normal","what":"The Vec Operation","title":"Picking Priors","text":"vec operation just special way saying column stacking. matrix \\[X = \\begin{bmatrix} & b \\\\ c & d \\end{bmatrix}\\] \\[vec(X) = \\begin{bmatrix} \\\\ c \\\\ b\\\\d\\end{bmatrix}.\\] ’s simple.","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"kronker-products","dir":"Articles","previous_headings":"Background on the Matrix Normal","what":"Kronker Products","title":"Picking Priors","text":"turns many different definitions multiply two matrices together. standard matrix multiplication, element-wise multiplication, also something called Kronecker product. Given two matrices \\(X = \\begin{bmatrix} x_{11} & x_{12} \\\\ x_{21} & x_{22} \\end{bmatrix}\\) \\(Y = \\begin{bmatrix} y_{11} & y_{12} \\\\ y_{21} & y_{22} \\end{bmatrix}\\), define Kronecker product \\(X\\) \\(Y\\) \\[ X \\otimes Y = \\begin{bmatrix}x_{11}Y & x_{12}Y \\\\ x_{21}Y & x_{22}Y \\end{bmatrix} = \\begin{bmatrix} x_{11}y_{11} & x_{11}y_{12} & x_{12}y_{11} & x_{12}y_{12} \\\\ x_{11}y_{21} & x_{11}y_{22} & x_{12}y_{21} & x_{12}y_{22} \\\\                 x_{21}y_{11} & x_{21}y_{12} & x_{22}y_{11} & x_{22}y_{12} \\\\ x_{21}y_{21} & x_{21}y_{22} & x_{22}y_{21} & x_{22}y_{22} \\\\   \\end{bmatrix}. \\] Notice essentially making larger matrix patterning Y X?","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"the-matrix-normal","dir":"Articles","previous_headings":"Background on the Matrix Normal","what":"The Matrix Normal","title":"Picking Priors","text":"going forward may wondering normal prior \\(\\Lambda\\) three parameters (\\(\\Theta\\), \\(\\Sigma\\), \\(\\Gamma\\)) rather two. means prior \\(\\Lambda\\) matrix normal rather multivariate normal. matrix normal generalization multivariate normal random matrices (just random vectors). simplified description matrix normal. multivariate normal mean vector covariance matrix describing spread distribution mean. matrix normal mean matrix, two covariance matrices describing spread distribution mean. first covariance matrix (\\(\\Sigma\\)) describes covariance rows \\(\\Lambda\\) second covariance matrix (\\(\\Gamma\\)). describes covariance columns \\(\\Lambda\\). relationship multivariate normal matrix normal follows. \\[\\Lambda \\sim N(\\Theta, \\Sigma, \\Gamma) \\leftrightarrow vec(\\Lambda) \\sim N(vec(\\Theta), \\Gamma \\otimes \\Sigma)\\] \\(\\otimes\\) represents Kronecker product \\(vec\\) represents vectorization operation (.e., column stacking matrix produce long vector). can now ask, distribution single element \\(\\Lambda\\)? answer simply \\[\\Lambda_{ij} \\sim N(\\Theta_{ij}, \\Sigma_{ii}\\Gamma_{jj}).\\] Similarly, can ask distribution single column \\(\\Lambda\\): \\[\\Lambda_{\\cdot j} \\sim N(\\Theta_{\\cdot j}, \\Gamma_{jj} \\Sigma).\\] Make sense? take look wikipedia complete treatment matrix-normal.","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"the-prior-for-sigma","dir":"Articles","previous_headings":"","what":"The prior for \\(\\Sigma\\)","title":"Picking Priors","text":"\\(\\Sigma\\) describes covariance log-ratios. \\(\\phi^{-1}\\) inverse \\(ALR_D\\) transform \\(\\Sigma\\) describes covariance \\(ALR_D\\) coordinates. Also note, section going hardest one, priors components faster describe probably easier understand.","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"background-on-the-prior","dir":"Articles","previous_headings":"The prior for \\(\\Sigma\\)","what":"Background on the Prior","title":"Picking Priors","text":"prior \\(\\Sigma\\) Inverse Wishart written \\[\\Sigma \\sim W^{-1}(\\Xi, \\upsilon)\\] \\(\\Xi\\) called scale matrix (must valid covariance matrix ), \\(\\upsilon\\) called degrees freedom parameter. \\(\\Sigma\\) \\((D-1)x(D-1)\\) matrix, constraint \\(\\upsilon\\) \\(\\upsilon \\geq D-1\\). inverse Wishart mildly complex form moments (e.g., mean variance). mean given \\[E[\\Sigma] = \\frac{\\Xi}{\\upsilon-D-2} \\quad \\text{} \\upsilon > D.\\] variance somewhat complicated (Wikipedia gives relationships) purposes can think \\(\\upsilon\\) setting variance, larger \\(\\upsilon\\) means less uncertainty (lower variance) mean, smaller \\(\\upsilon\\) means uncertainty (higher variance) mean.","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"choosing-upsilon-and-xi-","dir":"Articles","previous_headings":"The prior for \\(\\Sigma\\)","what":"Choosing \\(\\upsilon\\) and \\(\\Xi\\).","title":"Picking Priors","text":"Reading may seem intimidating: ’s form mean… ? ’s-think covariance log-ratios? ’s think . think -terms putting prior true abundances log-space transforming prior log-ratios. can really explain need explain bit background. Compositional Data Analysis Nutshell turns transforms \\(\\phi\\) examples log-ratio transforms studied field called compositional data analysis. Briefly, transforms can written form: \\(\\eta = \\Psi \\log \\pi\\). log-ratios (\\(\\eta\\)) just linear transform log-transformed relative-abundances. turns special properties \\(\\Psi\\), following also holds: \\(\\eta = \\Psi \\log w\\) \\(w\\) absolute (relative) abundances. can say log-ratios also just linear transform log-transformed absolute-abundances. Linear Transformations Covariance Matricies Recall \\(x \\sim N(\\mu, \\Sigma)\\) (multivariate \\(x\\)) matrix \\(\\Psi\\) \\(\\Psi x \\sim N(\\Psi \\mu, \\Psi \\Sigma \\Psi^T)\\). say think linear transformations covariance matrices applied pre post multiplying transformation matrix \\(\\Psi\\). Linear transformation Inverse Wishart turns \\(\\Omega \\sim W^{-1}(\\gamma, S)\\) \\(D\\times D\\) covariance matrix \\(\\Omega\\) \\(M\\times D\\) matrix \\(\\Psi\\) \\(\\Psi \\Omega \\Psi^T \\sim W^{-1}(\\upsilon, \\Psi S \\Psi^T)\\). Putting Together central question: reasonable prior log-ratios? used working log-ratios difficult. potentially simpler problem place prior log-absolute-abundances (\\(\\Omega\\)) whatever measuring, e.g., placing prior covariance log-absolute-abundances bacteria (\\(\\Omega \\sim W^{-1}(\\gamma, S)\\). example: Lets say given microbiome dataset, weak prior belief , average, taxa independent variance 1. want come values \\(\\gamma\\) \\(S\\) prior \\(\\Omega\\) reflect . Lets start specifying mean \\(\\Omega\\). \\[E[\\Omega] =I_D.\\] Next say little certainty mean (want high variance) set \\(\\gamma\\) close lower bound \\(D\\) (often like \\(\\gamma=D+3\\)). Now \\(\\gamma\\) need calculate \\(S\\) solving \\(S\\) equation Inverse-Wishart mean1: \\[S = E[\\Omega](\\gamma -D-1).\\] go ’s prior log-absolute-abundances. Next need transform prior log-ratios. Well allows us simplifying taking contrast matrix \\(\\Psi\\) log-ratio transform want transforming prior \\(\\Omega\\) \\(\\Sigma \\sim W^{-1}(\\gamma, \\Psi S \\Psi^T)\\). ’s prior log-ratios built form prior log-absolute-abundances. Note Phylogenetic priors: phylogenetic linear models, can make \\(S\\) (defined ) covariance derived phylogenetic differences taxa. allows fit phylogenetic linear models fido. Making Even Simpler Say prior \\(\\Omega \\sim W^{-1}(\\gamma, S)\\) covariance log-absolute-abundances (created example ). want transform prior \\(\\Sigma \\sim W^{-1}(\\upsilon, \\Xi)\\). simply taking \\(\\upsilon=\\gamma\\). calculate \\(\\Xi\\), rather worrying \\(\\Psi\\), functions driver package wrote , recipes: Hopefully simple enough useful folks.","code":"# To put prior on ALR_j coordinates for some j in (1,...,D-1) Xi <- clrvar2alrvar(S, j) # To put prior in a particular ILR coordinate defined by contrast matrix V Xi <- clrvar2ilrvar(S, V) # To put prior in CLR coordinates (this one needs two transforms) foo <- clrvar2alrvar(S, D) Xi <- alrvar2clrvar(foo, D)"},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"the-prior-for-lambda","dir":"Articles","previous_headings":"","what":"The prior for \\(\\Lambda\\)","title":"Picking Priors","text":"\\(\\Lambda\\) regression parameters linear model. prior \\(\\Lambda\\) just matrix-normal described : \\[\\Lambda \\sim N(\\Theta, \\Sigma, \\Gamma).\\] \\(\\Theta\\) mean matrix \\(\\Lambda\\), \\(\\Sigma\\) actually random (.e., don’t specify , specified prior \\(\\Sigma\\) discussed already), \\(\\Gamma\\) \\(QxQ\\)2 covariance matrix describing covariance columns \\(\\Lambda\\) (.e., effect different covariates). really need just discuss specifying \\(\\Theta\\) specifying \\(\\Gamma\\).","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"choosing-theta","dir":"Articles","previous_headings":"The prior for \\(\\Lambda\\)","what":"Choosing \\(\\Theta\\)","title":"Picking Priors","text":"really easy, situations simply matrix zeros. implies expect average, covariates interest associated composition.3. helps prevent inferrign effect isn’t one. Outside simple case lets say actually prior knowledge effects covariates. Perhaps knowledge mean effect covariates log-absolute-abundances describe \\(D\\times Q\\) matrix \\(\\). Well can just transform prior log-ratio coordinates want follows:","code":"# Transform from log-absolute-abundance effects to effects on absolute-abundances foo <- exp(A) # To put prior on ALR_j coordinates for some j in (1,...,D-1) Theta <- driver::alr_array(foo, j, parts=1) # To put prior in a particular ILR coordinate defined by contrast matrix V Theta <- driver::ilr_array(foo, V, parts=1) # To put prior in CLR coordinates Theta <- driver::clr_array(foo, parts=1)"},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"choosing-gamma","dir":"Articles","previous_headings":"The prior for \\(\\Lambda\\)","what":"Choosing \\(\\Gamma\\)","title":"Picking Priors","text":"Alright, get break \\(\\Gamma\\) doesn’t care log-ratio coordinates . ’s just \\(Q\\times Q\\) covariance matrix describing covariation effects \\(Q\\) covariates. example, Lets say data microbiome survey disease number healthy controls. goal figure different composition two groups. model may two covariates, intercept binary variable (1 sample disease, 0 healthy). probably want set prior allows intercept moderately large likely believe differences disease health small (want effect binary covariate modest). specify: \\[\\Gamma = \\alpha\\begin{bmatrix} 1 & 0 \\\\ 0& .2 \\end{bmatrix}\\] scalar \\(\\alpha\\) discuss depth . Note diagonals zero also specifies don’t think covariation intercept effect disease state (probably pretty good assumption example). choice alpha can important. describe later section choice \\(\\upsilon\\) \\(\\Xi\\) interact choice \\(\\Gamma\\). First need briefly describe prior \\(\\eta\\).","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"the-prior-for-eta","dir":"Articles","previous_headings":"","what":"The Prior for \\(\\eta\\)","title":"Picking Priors","text":"\\(\\eta\\) log-ratios regression relationship obscured noise. \\[\\eta_j \\sim N(\\Lambda X_j, \\Sigma).\\] Notice \\(\\Sigma\\) shows like prior \\(\\Lambda\\). Actually, parameters need specify, prior \\(\\eta\\) completely induced based priors \\(\\Lambda\\) \\(\\Sigma\\). reason discuss want readers recognize variation \\(\\eta\\) regression relationship specified \\(\\Sigma\\). means \\(\\Sigma\\) large noise, small less noise. also taken account specifying \\(\\upsilon\\) \\(\\Xi\\). next section expand idea.","code":""},{"path":"https://jsilve24.github.io/fido/articles/picking_priors.html","id":"how-the-choice-of-upsilon-and-xi-interacts-with-the-choice-of-gamma","dir":"Articles","previous_headings":"","what":"How the Choice of \\(\\upsilon\\) and \\(\\Xi\\) Interacts With the Choice of \\(\\Gamma\\)","title":"Picking Priors","text":"point subsection following, choice \\(\\Gamma\\), \\(\\Xi\\), \\(\\upsilon\\) senses place prior signal--noise ratio data. short: larger \\(\\Gamma\\) relative \\(\\Sigma\\) (specified \\(\\upsilon\\) \\(\\Xi\\)) signal, smaller \\(\\Gamma\\) realtive \\(\\Sigma\\) noise. describe . Notice alternatively write prior \\(\\eta\\) \\[\\eta \\sim N(\\Lambda X, \\Sigma, )\\] using matrix normal parallel prior \\(\\Lambda\\) \\[\\Lambda \\sim N(\\Theta, \\Sigma, \\Gamma).\\] can write vec form relationships \\[ \\begin{align} vec(\\eta) &\\sim N(vec(\\Lambda X), \\otimes\\Sigma) \\\\ vec(\\Lambda) &\\sim N(vec(\\Theta), \\Gamma \\otimes \\Sigma). \\end{align} \\] write \\(\\Gamma\\) multiplication scalar scaled matrix (matrix scaled sum diagonals equals 1) \\(\\Gamma=\\alpha \\bar{\\Gamma}\\) describing choice \\(\\Gamma\\) , equations turn : \\[ \\begin{align} vec(\\eta) &\\sim N(vec(\\Lambda X), 1(\\otimes\\Sigma)) \\\\ vec(\\Lambda) &\\sim N(vec(\\Theta), \\alpha(\\bar{\\Gamma}\\otimes \\Sigma)). \\end{align} \\] can see magnitude \\(\\Lambda\\) factor \\(\\alpha\\) times noise level. \\(\\alpha<1\\) magnitude \\(\\Lambda\\) smaller magnitude noise. \\(\\alpha > 1\\) magnitude \\(\\Lambda\\) greater magnitude noise. actual “signal” product \\(\\Lambda X\\) (depends scale \\(X\\)) well hopefully point clear: magnitude \\(\\Sigma\\) (specified \\(\\upsilon\\) \\(\\Xi\\)) comparision magnitude \\(\\Gamma\\) sets signal--noise ratio prior.","code":""},{"path":"https://jsilve24.github.io/fido/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Justin Silverman. Author. Kim Roche. Contributor. Michelle Nixon. Contributor, maintainer.","code":""},{"path":"https://jsilve24.github.io/fido/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Silverman, JD, Roche, K, Holmes, ZC, David, LA, Mukherjee, S. Bayesian Multinomial Logistic Normal Models Marginally Latent Matrix-T Processes. 2022, Journal Machine Learning Research.","code":"@Article{,   title = {Bayesian Multinomial Logistic Normal Models through Marginally Latent Matrix-T Processes},   author = {Justin D Silverman and Kim Roche and Zachary C Holmes and Lawrence A David and Sayan Mukherjee},   year = {2022},   volume = {23},   journal = {Journal of Machine Learning Research},   url = {https://www.jmlr.org/papers/v23/19-882.html}, }"},{"path":"https://jsilve24.github.io/fido/index.html","id":"fido-formerly-stray","dir":"","previous_headings":"","what":"Bayesian Multiniomial Logisic Normal Models (really fast)","title":"Bayesian Multiniomial Logisic Normal Models (really fast)","text":"Multinomial Logistic-Normal Models (really fast) little tar-ball joy","code":""},{"path":"https://jsilve24.github.io/fido/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Bayesian Multiniomial Logisic Normal Models (really fast)","text":"Silverman, JD, Roche, K, Holmes, ZC, David, LA, Mukherjee, S. Journal Machine Learning Research. 23(7), 2022:1−42.","code":""},{"path":"https://jsilve24.github.io/fido/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Bayesian Multiniomial Logisic Normal Models (really fast)","text":"source code freely availale GPL-3 License.","code":""},{"path":"https://jsilve24.github.io/fido/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Multiniomial Logisic Normal Models (really fast)","text":"download development version GitHub: notes: version 1.0.0, fido now CRAN. installation options can greatly speed fido (often much 10-50 fold). detailed description installation, take look installation page. Vignettes prebuilt fido webpage. want vignettes build locally package installation must also pass build=TRUE build_opts = c(\"---resave-data\", \"---manual\") options install_github.","code":"install.packages(\"fido\") devtools::install_github(\"jsilve24/fido\", ref=\"develop\")"},{"path":"https://jsilve24.github.io/fido/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Bayesian Multiniomial Logisic Normal Models (really fast)","text":"Introduction fido::Pibble Non-linear models fido::basset Joint Modeling (e.g., Multinomics) fido::Orthus Tips Specifying Priors Mitigating PCR bias","code":""},{"path":"https://jsilve24.github.io/fido/index.html","id":"research-using-fido","dir":"","previous_headings":"","what":"Research Using fido","title":"Bayesian Multiniomial Logisic Normal Models (really fast)","text":"Silverman et al., Bayesian Multinomial Logistic Normal Models Marginally Latent Matrix-T Processes Silverman et al., Measuring Mitigating PCR Bias Microbiome Data Holmes et al., Short-Chain Fatty Acid Production Gut Microbiota Children Obesity Differs According Prebiotic Choice Bacterial Community Composition Silverman et al., Using Influenza surveillance ntworks estimate state-specific prevalance SARS-CoV-2 United States","code":""},{"path":"https://jsilve24.github.io/fido/index.html","id":"bugsfeature-requests","dir":"","previous_headings":"","what":"Bugs/Feature requests","title":"Bayesian Multiniomial Logisic Normal Models (really fast)","text":"checked FAQ? appreciate bug reports feature requests. Please post github issue tracker .","code":""},{"path":"https://jsilve24.github.io/fido/reference/Y.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Silverman et al. (2019) bioRxiv — Y","title":"Data from Silverman et al. (2019) bioRxiv — Y","text":"Mock communities calibration samples created measuring validating model PCR bias. data preprocessed original manuscript.","code":""},{"path":"https://jsilve24.github.io/fido/reference/Y.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Silverman et al. (2019) bioRxiv — Y","text":"matrix Y (counts community member)","code":""},{"path":"https://jsilve24.github.io/fido/reference/Y.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data from Silverman et al. (2019) bioRxiv — Y","text":"Justin D. Silverman, Rachael J. Bloom, Sharon Jiang, Heather K. Durand, Sayan Mukherjee,  Lawrence . David. (2019) Measuring Mitigating PCR Bias Microbiome Data.  bioRxiv 604025; doi: https://doi.org/10.1101/604025","code":""},{"path":"https://jsilve24.github.io/fido/reference/access_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for accessing model fit dimensions — ncategories.pibblefit","title":"Generic method for accessing model fit dimensions — ncategories.pibblefit","text":"Generic method accessing model fit dimensions","code":""},{"path":"https://jsilve24.github.io/fido/reference/access_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for accessing model fit dimensions — ncategories.pibblefit","text":"","code":"# S3 method for pibblefit ncategories(m)  # S3 method for pibblefit nsamples(m)  # S3 method for pibblefit ncovariates(m)  # S3 method for pibblefit niter(m)  # S3 method for orthusfit ncategories(m)  # S3 method for orthusfit nsamples(m)  # S3 method for orthusfit ncovariates(m)  # S3 method for orthusfit niter(m)  ncategories(m)  nsamples(m)  ncovariates(m)  niter(m)"},{"path":"https://jsilve24.github.io/fido/reference/access_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for accessing model fit dimensions — ncategories.pibblefit","text":"m object class pibblefit","code":""},{"path":"https://jsilve24.github.io/fido/reference/access_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for accessing model fit dimensions — ncategories.pibblefit","text":"integer","code":""},{"path":"https://jsilve24.github.io/fido/reference/access_dims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic method for accessing model fit dimensions — ncategories.pibblefit","text":"alternative approach accessing dimensions    access directly pibblefit object using list indexing.  * ncategories equivalent m$D * nsamples equivalent m$N * ncovariates equivalent m$Q","code":""},{"path":"https://jsilve24.github.io/fido/reference/alr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the ALR of a matrix — alr","title":"Compute the ALR of a matrix — alr","text":"Compute ALR matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/alr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the ALR of a matrix — alr","text":"","code":"alr(x, d = NULL)"},{"path":"https://jsilve24.github.io/fido/reference/alr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the ALR of a matrix — alr","text":"x matrix rows samples d Index column used reference. Defaults last column","code":""},{"path":"https://jsilve24.github.io/fido/reference/alr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the ALR of a matrix — alr","text":"matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/alrInv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inverse ALR of a matrix — alrInv","title":"Compute the inverse ALR of a matrix — alrInv","text":"Compute inverse ALR matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/alrInv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inverse ALR of a matrix — alrInv","text":"","code":"alrInv(y, d = NULL)"},{"path":"https://jsilve24.github.io/fido/reference/alrInv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inverse ALR of a matrix — alrInv","text":"y ALR transformed matrix d Index column used reference. Defaults last column","code":""},{"path":"https://jsilve24.github.io/fido/reference/alrInv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the inverse ALR of a matrix — alrInv","text":"matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/alrInv_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the ALR of an array — alrInv_array","title":"Compute the ALR of an array — alrInv_array","text":"Compute ALR array","code":""},{"path":"https://jsilve24.github.io/fido/reference/alrInv_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the ALR of an array — alrInv_array","text":"","code":"alrInv_array(y, d = dim(y)[coords] + 1, coords)"},{"path":"https://jsilve24.github.io/fido/reference/alrInv_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the ALR of an array — alrInv_array","text":"y multidimensional ALR transformed array d Index column used reference. Defaults last column coords index dimension `x` represents coordinates","code":""},{"path":"https://jsilve24.github.io/fido/reference/alrInv_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the ALR of an array — alrInv_array","text":"array","code":""},{"path":"https://jsilve24.github.io/fido/reference/alr_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the ALR of an array — alr_array","title":"Compute the ALR of an array — alr_array","text":"Compute ALR array","code":""},{"path":"https://jsilve24.github.io/fido/reference/alr_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the ALR of an array — alr_array","text":"","code":"alr_array(x, d = dim(x)[parts], parts)"},{"path":"https://jsilve24.github.io/fido/reference/alr_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the ALR of an array — alr_array","text":"x multidimensional array simplex d Index column used reference. Defaults last column parts index dimension `x` represents parts","code":""},{"path":"https://jsilve24.github.io/fido/reference/alr_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the ALR of an array — alr_array","text":"array","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.list.orthusfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert object of class orthusfit to a list — as.list.orthusfit","title":"Convert object of class orthusfit to a list — as.list.orthusfit","text":"Convert object class orthusfit list","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.list.orthusfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert object of class orthusfit to a list — as.list.orthusfit","text":"","code":"# S3 method for orthusfit as.list(x, ...)"},{"path":"https://jsilve24.github.io/fido/reference/as.list.orthusfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert object of class orthusfit to a list — as.list.orthusfit","text":"x object class orthusfit ... currently unused","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.list.orthusfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert object of class orthusfit to a list — as.list.orthusfit","text":"list converted orthusfit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.list.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert object of class pibblefit to a list — as.list.pibblefit","title":"Convert object of class pibblefit to a list — as.list.pibblefit","text":"Convert object class pibblefit list","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.list.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert object of class pibblefit to a list — as.list.pibblefit","text":"","code":"# S3 method for pibblefit as.list(x, ...)"},{"path":"https://jsilve24.github.io/fido/reference/as.list.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert object of class pibblefit to a list — as.list.pibblefit","text":"x object class pibblefit ... currently unused","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.list.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert object of class pibblefit to a list — as.list.pibblefit","text":"list converted pibblefit object.","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.orthusfit.html","id":null,"dir":"Reference","previous_headings":"","what":"convert list to orthusfit — as.orthusfit","title":"convert list to orthusfit — as.orthusfit","text":"convert list orthusfit","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.orthusfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert list to orthusfit — as.orthusfit","text":"","code":"as.orthusfit(object)"},{"path":"https://jsilve24.github.io/fido/reference/as.orthusfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert list to orthusfit — as.orthusfit","text":"object list object","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.orthusfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert list to orthusfit — as.orthusfit","text":"orthusfit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"convert list to pibblefit — as.pibblefit","title":"convert list to pibblefit — as.pibblefit","text":"convert list pibblefit","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert list to pibblefit — as.pibblefit","text":"","code":"as.pibblefit(object)"},{"path":"https://jsilve24.github.io/fido/reference/as.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert list to pibblefit — as.pibblefit","text":"object list object","code":""},{"path":"https://jsilve24.github.io/fido/reference/as.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert list to pibblefit — as.pibblefit","text":"pibblefit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/basset_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to fit basset models — basset_fit","title":"Interface to fit basset models — basset_fit","text":"Basset (Lazy Learner) - non-linear regression models fido","code":""},{"path":"https://jsilve24.github.io/fido/reference/basset_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to fit basset models — basset_fit","text":"","code":"basset(   Y = NULL,   X,   upsilon = NULL,   Theta = NULL,   Gamma = NULL,   Xi = NULL,   linear = NULL,   init = NULL,   pars = c(\"Eta\", \"Lambda\", \"Sigma\"),   newdata = NULL,   ... )  # S3 method for bassetfit refit(m, pars = c(\"Eta\", \"Lambda\", \"Sigma\"), ...)"},{"path":"https://jsilve24.github.io/fido/reference/basset_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to fit basset models — basset_fit","text":"Y D x N matrix counts (NULL uses priors ) X Q x N matrix covariates (NULL) upsilon dof inverse wishart prior (numeric must > D) (default: D+3) Theta function dimensions dim(X) -> (D-1)xN (prior mean gaussian process). additive GP model, can list functions dimensions dim(X) -> (D-1)xN + (optional) matrix size (D-1)xQ prior linear component desired. Gamma function dimension dim(X) -> NxN (kernel matrix gaussian process). additive GP model, can list functions dimension dim(X) -> NxN + QxQ prior covariance matrix linear component specified. assumed order matches order Theta. Xi (D-1)x(D-1) prior covariance matrix (default: ALR transform diag(1)*(upsilon-D)/2 - essentially iid \"base scale\" using Aitchison terminology) linear vector denoting rows X used  linear component specified. Default rows. init (D-1) x Q initialization Eta optimization pars character vector posterior parameters return newdata Default NULL. non-null, newdata used uncollapse sampler place X. ... arguments passed pibble (used internally fit basset model) m object class bassetfit","code":""},{"path":"https://jsilve24.github.io/fido/reference/basset_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface to fit basset models — basset_fit","text":"object class bassetfit","code":""},{"path":"https://jsilve24.github.io/fido/reference/basset_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface to fit basset models — basset_fit","text":"full model given : $$Y_j \\sim Multinomial(\\Pi_j)$$ $$\\Pi_j = \\Phi^{-1}(\\Eta_j)$$ $$\\Eta \\sim MN_{D-1 x N}(\\Lambda, \\Sigma, I_N)$$ $$\\Lambda \\sim GP_{D-1 x Q}(\\Theta(X), \\Sigma, \\Gamma(X))$$ $$\\Sigma \\sim InvWish(\\upsilon, \\Xi)$$ Gamma(X) short hand Gram matrix Kernel function. Alternatively can used fit additive GP form: $$Y_j \\sim Multinomial(\\Pi_j)$$ $$\\Pi_j = \\Phi^{-1}(\\Eta_j)$$ $$\\Eta \\sim MN_{D-1 x N}(\\Lambda, \\Sigma, I_N)$$ $$\\Lambda = \\Lambda_1 + ... + \\Lambda_p + \\Beta X$$ $$\\Lambda_1 \\sim GP_{D-1 x Q}(\\Theta_1(X), \\Sigma, \\Gamma_p(X))$$ ... $$\\Lambda_p \\sim GP_{D-1 x Q}(\\Theta_1(X), \\Sigma, \\Gamma_1(X))$$ $$\\Beta \\sim MN(\\Theta_B, \\Sigma, \\Gamma_B)$$ $$\\Sigma \\sim InvWish(\\upsilon, \\Xi)$$ Gamma(X) short hand Gram matrix Kernel function. Default behavior use MAP estimate uncollaping LTP model laplace approximation preformed.","code":""},{"path":"https://jsilve24.github.io/fido/reference/check_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Check vector/matrix/data.frame for expected dimensions or throw error — check_dims","title":"Check vector/matrix/data.frame for expected dimensions or throw error — check_dims","text":"Check vector/matrix/data.frame expected dimensions throw error","code":""},{"path":"https://jsilve24.github.io/fido/reference/check_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check vector/matrix/data.frame for expected dimensions or throw error — check_dims","text":"","code":"check_dims(x, d, par)"},{"path":"https://jsilve24.github.io/fido/reference/check_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check vector/matrix/data.frame for expected dimensions or throw error — check_dims","text":"x object check d expected dimensions par character name x (error message)","code":""},{"path":"https://jsilve24.github.io/fido/reference/check_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check vector/matrix/data.frame for expected dimensions or throw error — check_dims","text":"nothing error, otherwise throws error","code":""},{"path":"https://jsilve24.github.io/fido/reference/check_dims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check vector/matrix/data.frame for expected dimensions or throw error — check_dims","text":"","code":"y <- c(1,3,4) check_dims(y, 3, \"y\")"},{"path":"https://jsilve24.github.io/fido/reference/clr_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the CLR of an array — clr_array","title":"Compute the CLR of an array — clr_array","text":"Compute CLR array","code":""},{"path":"https://jsilve24.github.io/fido/reference/clr_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the CLR of an array — clr_array","text":"","code":"clr_array(x, parts)"},{"path":"https://jsilve24.github.io/fido/reference/clr_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the CLR of an array — clr_array","text":"x multidimensional array index parts index dimension `x` represents parts","code":""},{"path":"https://jsilve24.github.io/fido/reference/clr_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the CLR of an array — clr_array","text":"array","code":""},{"path":"https://jsilve24.github.io/fido/reference/coef.orthusfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Return regression coefficients of orthus object — coef.orthusfit","title":"Return regression coefficients of orthus object — coef.orthusfit","text":"Orthus: Returned array dimension (D-1+P) x Q x iter (ALR ILR)  otherwise (D+P) x Q x iter.","code":""},{"path":"https://jsilve24.github.io/fido/reference/coef.orthusfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return regression coefficients of orthus object — coef.orthusfit","text":"","code":"# S3 method for orthusfit coef(object, ...)"},{"path":"https://jsilve24.github.io/fido/reference/coef.orthusfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return regression coefficients of orthus object — coef.orthusfit","text":"object object class orthusfit ... options passed coef.orthusfit (see details)","code":""},{"path":"https://jsilve24.github.io/fido/reference/coef.orthusfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return regression coefficients of orthus object — coef.orthusfit","text":"Array dimension (D-1) x Q x iter","code":""},{"path":"https://jsilve24.github.io/fido/reference/coef.orthusfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return regression coefficients of orthus object — coef.orthusfit","text":"arguments: use_names column row names passed Y X  call pibble, names applied output  array.","code":""},{"path":"https://jsilve24.github.io/fido/reference/coef.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Return regression coefficients of pibblefit object — coef.pibblefit","title":"Return regression coefficients of pibblefit object — coef.pibblefit","text":"Pibble: Returned array dimension (D-1) x Q x iter (ALR ILR) otherwise DxQxiter (proportions clr).","code":""},{"path":"https://jsilve24.github.io/fido/reference/coef.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return regression coefficients of pibblefit object — coef.pibblefit","text":"","code":"# S3 method for pibblefit coef(object, ...)"},{"path":"https://jsilve24.github.io/fido/reference/coef.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return regression coefficients of pibblefit object — coef.pibblefit","text":"object object class pibblefit ... options passed coef.pibblefit (see details)","code":""},{"path":"https://jsilve24.github.io/fido/reference/coef.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return regression coefficients of pibblefit object — coef.pibblefit","text":"Array dimension (D-1) x Q x iter","code":""},{"path":"https://jsilve24.github.io/fido/reference/coef.pibblefit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return regression coefficients of pibblefit object — coef.pibblefit","text":"arguments: `use_names` column row names passed Y X  call pibble, names applied output  array.","code":""},{"path":"https://jsilve24.github.io/fido/reference/conjugateLinearModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve Bayesian Multivariate Conjugate Linear Model — conjugateLinearModel","title":"Solve Bayesian Multivariate Conjugate Linear Model — conjugateLinearModel","text":"See details model.  Notation: N number samples, D dimension response, Q number covariates.","code":""},{"path":"https://jsilve24.github.io/fido/reference/conjugateLinearModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve Bayesian Multivariate Conjugate Linear Model — conjugateLinearModel","text":"","code":"conjugateLinearModel(Y, X, Theta, Gamma, Xi, upsilon, n_samples = 2000L)"},{"path":"https://jsilve24.github.io/fido/reference/conjugateLinearModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve Bayesian Multivariate Conjugate Linear Model — conjugateLinearModel","text":"Y matrix dimension D x N X matrix covariates dimension Q x N Theta matrix prior mean dimension D x Q Gamma covariance matrix dimension Q x Q Xi covariance matrix dimension D x D upsilon scalar (must > D-1) degrees freedom InvWishart prior n_samples number samples draw (default: 2000)","code":""},{"path":"https://jsilve24.github.io/fido/reference/conjugateLinearModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve Bayesian Multivariate Conjugate Linear Model — conjugateLinearModel","text":"List components Lambda Array dimension (D-1) x Q x n_samples (posterior samples) Sigma Array dimension (D-1) x (D-1) x n_samples (posterior samples)","code":""},{"path":"https://jsilve24.github.io/fido/reference/conjugateLinearModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solve Bayesian Multivariate Conjugate Linear Model — conjugateLinearModel","text":"$$Y ~ MN_{D-1 x N}(Lambda*X, Sigma, I_N)$$ $$Lambda ~ MN_{D-1 x Q}(Theta, Sigma, Gamma)$$ $$Sigma ~ InvWish(upsilon, Xi)$$ function provides means sampling posterior distribution Lambda Sigma.","code":""},{"path":"https://jsilve24.github.io/fido/reference/conjugateLinearModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solve Bayesian Multivariate Conjugate Linear Model — conjugateLinearModel","text":"","code":"sim <- pibble_sim() eta.hat <- t(alr(t(sim$Y+0.65))) fit <- conjugateLinearModel(eta.hat, sim$X, sim$Theta, sim$Gamma,                              sim$Xi, sim$upsilon, n_samples=2000)"},{"path":"https://jsilve24.github.io/fido/reference/convert_orthus_covariance.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert orthus covariance matricies between representations — convert_orthus_covariance","title":"Convert orthus covariance matricies between representations — convert_orthus_covariance","text":"Convert orthus covariance matricies representations","code":""},{"path":"https://jsilve24.github.io/fido/reference/convert_orthus_covariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert orthus covariance matricies between representations — convert_orthus_covariance","text":"","code":"oilrvar2ilrvar(Sigma, s, V1, V2)  oilrvar2clrvar(Sigma, s, V)  oclrvar2ilrvar(Sigma, s, V)  oalrvar2clrvar(Sigma, s, d1)  oclrvar2alrvar(Sigma, s, d2)  oalrvar2alrvar(Sigma, s, d1, d2)  oalrvar2ilrvar(Sigma, s, d1, V2)  oilrvar2alrvar(Sigma, s, V1, d2)"},{"path":"https://jsilve24.github.io/fido/reference/convert_orthus_covariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert orthus covariance matricies between representations — convert_orthus_covariance","text":"Sigma covariance matrix arrat specified transformed space  (dim(Sigma)[3]=iter) s first s rows colums Sigma transformed V1 ILR contrast matrix basis Sigma already V2 ILR contrast matrix basis Sigma desired V ILR contrast matrix (.e., transformation matrix ILR) d1 alr reference element Sigma already expressed respec d2 alr reference element Sigma expressed respect ","code":""},{"path":"https://jsilve24.github.io/fido/reference/convert_orthus_covariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert orthus covariance matricies between representations — convert_orthus_covariance","text":"matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/create_default_ilr_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a default ILR base — create_default_ilr_base","title":"Create a default ILR base — create_default_ilr_base","text":"Create default ILR base","code":""},{"path":"https://jsilve24.github.io/fido/reference/create_default_ilr_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a default ILR base — create_default_ilr_base","text":"","code":"create_default_ilr_base(D)"},{"path":"https://jsilve24.github.io/fido/reference/create_default_ilr_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a default ILR base — create_default_ilr_base","text":"D number parts (e.g., number columns untransformed data)","code":""},{"path":"https://jsilve24.github.io/fido/reference/create_default_ilr_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a default ILR base — create_default_ilr_base","text":"matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/fido_package.html","id":null,"dir":"Reference","previous_headings":"","what":"fido: Fitting and Analysis of Multinomial Logistic Normal Models — fido_package","title":"fido: Fitting and Analysis of Multinomial Logistic Normal Models — fido_package","text":"Provides methods fitting inspection Bayesian Multinomial   Logistic Normal Models using MAP estimation Laplace Approximation.  Key functionality implemented C++ scalability.","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/fido_package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fido: Fitting and Analysis of Multinomial Logistic Normal Models — fido_package","text":"Maintainer: Michelle Nixon pistner@psu.edu [contributor] Authors: Justin Silverman Justin.Silverman@psu.edu contributors: Kim Roche kimberly.roche@duke.edu [contributor]","code":""},{"path":"https://jsilve24.github.io/fido/reference/fido_transforms.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Fit fido Parameters to other representations — fido_transforms","title":"Transform Fit fido Parameters to other representations — fido_transforms","text":"collection convenience functions transforming fido fit objects number different representations including ILR bases, CLR coordinates, ALR coordinates, proportions.","code":""},{"path":"https://jsilve24.github.io/fido/reference/fido_transforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Fit fido Parameters to other representations — fido_transforms","text":"","code":"to_proportions(m)  to_alr(m, d)  to_ilr(m, V = NULL)  to_clr(m)  # S3 method for pibblefit to_proportions(m)  # S3 method for orthusfit to_proportions(m)  # S3 method for pibblefit to_alr(m, d)  # S3 method for orthusfit to_alr(m, d)  # S3 method for pibblefit to_ilr(m, V = NULL)  # S3 method for orthusfit to_ilr(m, V = NULL)  # S3 method for pibblefit to_clr(m)  # S3 method for orthusfit to_clr(m)"},{"path":"https://jsilve24.github.io/fido/reference/fido_transforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Fit fido Parameters to other representations — fido_transforms","text":"m object class pibblefit orthusfit (e.g., output pibble orthus) d (integer) multinomial category take new alr reference V (matrix) contrast matrix ILR basis transform (defaults  create_default_ilr_base(D))","code":""},{"path":"https://jsilve24.github.io/fido/reference/fido_transforms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Fit fido Parameters to other representations — fido_transforms","text":"object","code":""},{"path":"https://jsilve24.github.io/fido/reference/fido_transforms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Fit fido Parameters to other representations — fido_transforms","text":"orthus, transforms appleid log-ratio parameters Note: degeneracy representations covariance  matrix represented terms proportions. function  to_proportions attempt transform parameters Sigma prior Xi instead just removes pibblefit object returned.","code":""},{"path":"https://jsilve24.github.io/fido/reference/gather_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather Multidimensional Array to Tidy Tibble — gather_array","title":"Gather Multidimensional Array to Tidy Tibble — gather_array","text":"Gather Multidimensional Array Tidy Tibble","code":""},{"path":"https://jsilve24.github.io/fido/reference/gather_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather Multidimensional Array to Tidy Tibble — gather_array","text":"","code":"gather_array(a, value, ..., .id = NULL)"},{"path":"https://jsilve24.github.io/fido/reference/gather_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather Multidimensional Array to Tidy Tibble — gather_array","text":"multidimensional array value unquoted name column values (defaults \"var\") ... unquoted dimension names (defaults \"dim_1\", \"dim_2\", etc...) .id specified, name column created name captured","code":""},{"path":"https://jsilve24.github.io/fido/reference/gather_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather Multidimensional Array to Tidy Tibble — gather_array","text":"data.frame","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/gather_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather Multidimensional Array to Tidy Tibble — gather_array","text":"","code":"a <- array(1:100, dim =c(10, 5, 2)) gather_array(a, sequence, A, B, C) #>      A B C sequence #> 1    1 1 1        1 #> 2    2 1 1        2 #> 3    3 1 1        3 #> 4    4 1 1        4 #> 5    5 1 1        5 #> 6    6 1 1        6 #> 7    7 1 1        7 #> 8    8 1 1        8 #> 9    9 1 1        9 #> 10  10 1 1       10 #> 11   1 2 1       11 #> 12   2 2 1       12 #> 13   3 2 1       13 #> 14   4 2 1       14 #> 15   5 2 1       15 #> 16   6 2 1       16 #> 17   7 2 1       17 #> 18   8 2 1       18 #> 19   9 2 1       19 #> 20  10 2 1       20 #> 21   1 3 1       21 #> 22   2 3 1       22 #> 23   3 3 1       23 #> 24   4 3 1       24 #> 25   5 3 1       25 #> 26   6 3 1       26 #> 27   7 3 1       27 #> 28   8 3 1       28 #> 29   9 3 1       29 #> 30  10 3 1       30 #> 31   1 4 1       31 #> 32   2 4 1       32 #> 33   3 4 1       33 #> 34   4 4 1       34 #> 35   5 4 1       35 #> 36   6 4 1       36 #> 37   7 4 1       37 #> 38   8 4 1       38 #> 39   9 4 1       39 #> 40  10 4 1       40 #> 41   1 5 1       41 #> 42   2 5 1       42 #> 43   3 5 1       43 #> 44   4 5 1       44 #> 45   5 5 1       45 #> 46   6 5 1       46 #> 47   7 5 1       47 #> 48   8 5 1       48 #> 49   9 5 1       49 #> 50  10 5 1       50 #> 51   1 1 2       51 #> 52   2 1 2       52 #> 53   3 1 2       53 #> 54   4 1 2       54 #> 55   5 1 2       55 #> 56   6 1 2       56 #> 57   7 1 2       57 #> 58   8 1 2       58 #> 59   9 1 2       59 #> 60  10 1 2       60 #> 61   1 2 2       61 #> 62   2 2 2       62 #> 63   3 2 2       63 #> 64   4 2 2       64 #> 65   5 2 2       65 #> 66   6 2 2       66 #> 67   7 2 2       67 #> 68   8 2 2       68 #> 69   9 2 2       69 #> 70  10 2 2       70 #> 71   1 3 2       71 #> 72   2 3 2       72 #> 73   3 3 2       73 #> 74   4 3 2       74 #> 75   5 3 2       75 #> 76   6 3 2       76 #> 77   7 3 2       77 #> 78   8 3 2       78 #> 79   9 3 2       79 #> 80  10 3 2       80 #> 81   1 4 2       81 #> 82   2 4 2       82 #> 83   3 4 2       83 #> 84   4 4 2       84 #> 85   5 4 2       85 #> 86   6 4 2       86 #> 87   7 4 2       87 #> 88   8 4 2       88 #> 89   9 4 2       89 #> 90  10 4 2       90 #> 91   1 5 2       91 #> 92   2 5 2       92 #> 93   3 5 2       93 #> 94   4 5 2       94 #> 95   5 5 2       95 #> 96   6 5 2       96 #> 97   7 5 2       97 #> 98   8 5 2       98 #> 99   9 5 2       99 #> 100 10 5 2      100"},{"path":"https://jsilve24.github.io/fido/reference/kernels.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate RBF Kernel — kernels","title":"Multivariate RBF Kernel — kernels","text":"Designed partially specified. (see examples)","code":""},{"path":"https://jsilve24.github.io/fido/reference/kernels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate RBF Kernel — kernels","text":"","code":"SE(X, sigma = 1, rho = median(as.matrix(dist(t(X)))), jitter = 1e-10)  LINEAR(X, sigma = 1, c = rep(0, nrow(X)))"},{"path":"https://jsilve24.github.io/fido/reference/kernels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate RBF Kernel — kernels","text":"X covariate (dimension Q x N; .e., covariates x samples) sigma scalar parameter rho scalar bandwidth parameter jitter small scalar add -diagonal gram matrix  (numerical underflow issues) c vector parameter defining intercept linear kernel","code":""},{"path":"https://jsilve24.github.io/fido/reference/kernels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate RBF Kernel — kernels","text":"Gram Matrix (N x N) (e.g., Kernel evaluated  pair points)","code":""},{"path":"https://jsilve24.github.io/fido/reference/kernels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate RBF Kernel — kernels","text":"Gram matrix G given SE (squared exponential): $$G = \\sigma^2 * exp(-[(X-c)'(X-c)]/(s*\\rho^2))$$ LINEAR: $$G = \\sigma^2*(X-c)'(X-c)$$","code":""},{"path":"https://jsilve24.github.io/fido/reference/lambda_to_iqlr.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Lambda into IQLR (Inter-Quantile Log-Ratio) — lambda_to_iqlr","title":"Transform Lambda into IQLR (Inter-Quantile Log-Ratio) — lambda_to_iqlr","text":"Takes idea Wu et al. (citation ) calculates IQLR    Lambda, potentially useful believe invariant group    categories (e.g., taxa / genes) changing (absolute abundance)    samples. IQLR defined    $$IQLR_x = log(x_i/g(IQVF))$$   1,...,D.    IQVF CLR coordinates whose variance within inter-quantile range   (defined probs argument function).    different IQVF fit posteior sample IQVFs calculted   based posterior estimates Lambda. variance CLR coordinate   defined norm row Lambda[,focus.cov] (.e.,    covariation Eta, explained covariates). definition    variance allows uses exclude variation technical / trivial sources   calculation IQVF/IQLR.","code":""},{"path":"https://jsilve24.github.io/fido/reference/lambda_to_iqlr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Lambda into IQLR (Inter-Quantile Log-Ratio) — lambda_to_iqlr","text":"","code":"lambda_to_iqlr(m, focus.cov = NULL, probs = c(0.25, 0.75))"},{"path":"https://jsilve24.github.io/fido/reference/lambda_to_iqlr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Lambda into IQLR (Inter-Quantile Log-Ratio) — lambda_to_iqlr","text":"m object class pibblefit (e.g., output pibble) focus.cov vector integers characters specifying columns (covariates) Lambda include calculating IQLR (NULL, default, uses covariates) probs bounds categories (.e., features / genes / taxa) include  calculation iqlr (smaller bounds means stringent inclusion criteria)","code":""},{"path":"https://jsilve24.github.io/fido/reference/lambda_to_iqlr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Lambda into IQLR (Inter-Quantile Log-Ratio) — lambda_to_iqlr","text":"array dimension (D, Q, iter) D number taxa, Q number covariates, iter number posterior samples.","code":""},{"path":"https://jsilve24.github.io/fido/reference/lambda_to_iqlr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Lambda into IQLR (Inter-Quantile Log-Ratio) — lambda_to_iqlr","text":"Primarily intended differential expression analysis  assumption small group categories (e.g., taxa / genes) changing","code":""},{"path":"https://jsilve24.github.io/fido/reference/lambda_to_iqlr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transform Lambda into IQLR (Inter-Quantile Log-Ratio) — lambda_to_iqlr","text":"Jia R. Wu, Jean M. Macklaim, Briana L. Genge, Gregory B. Gloor (2017)   Finding center: corrections asymmetry high-throughput sequencing   datasets. arxiv:1704.01841v1","code":""},{"path":"https://jsilve24.github.io/fido/reference/lambda_to_iqlr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Lambda into IQLR (Inter-Quantile Log-Ratio) — lambda_to_iqlr","text":"","code":"sim <- pibble_sim() fit <- pibble(sim$Y, sim$X) # Use first two covariates to define iqlr, just show first 5 samples lambda_to_iqlr(fit, 1:2)[,,1:5]  #> , , 1 #>  #>              [,1]       [,2] #>  [1,]  2.71146763  5.7759995 #>  [2,] -2.83600181 -2.8201434 #>  [3,]  6.21761264 -1.0203479 #>  [4,]  1.03980272 -1.1813194 #>  [5,]  0.03148194  0.6107504 #>  [6,]  0.56390175 -1.4876453 #>  [7,] -0.35231497 -0.2046159 #>  [8,]  0.99318550  2.1900294 #>  [9,] -2.59688997  0.4789353 #> [10,]  1.00490204 -0.3834659 #>  #> , , 2 #>  #>             [,1]         [,2] #>  [1,]  3.0292163  6.150526827 #>  [2,] -2.3634092 -2.582310950 #>  [3,]  6.5441694 -0.303325513 #>  [4,]  1.2922373 -1.710284823 #>  [5,]  0.7504182  0.466272166 #>  [6,]  1.1748118 -1.211781887 #>  [7,]  0.3199885 -0.009770112 #>  [8,]  0.5421854  3.402663821 #>  [9,] -3.0092345 -0.480597111 #> [10,]  1.5254915 -0.143235239 #>  #> , , 3 #>  #>             [,1]       [,2] #>  [1,]  2.5347822  5.5245149 #>  [2,] -2.9019233 -2.2496116 #>  [3,]  7.2971256 -0.3872665 #>  [4,]  1.0844075 -0.4086840 #>  [5,]  0.3311034  0.6531207 #>  [6,]  1.1255328 -1.2612509 #>  [7,]  0.1891496  0.2564228 #>  [8,]  0.5524670  2.6479555 #>  [9,] -2.7624073 -0.9780206 #> [10,]  1.2984684 -0.2569998 #>  #> , , 4 #>  #>              [,1]        [,2] #>  [1,]  3.52519216  5.21034519 #>  [2,] -3.02047160 -3.22797156 #>  [3,]  6.30534034 -0.46164556 #>  [4,]  1.11320938 -0.40412392 #>  [5,]  0.81873680  0.49524828 #>  [6,]  1.37482451 -1.09045711 #>  [7,]  0.06283319 -0.03024653 #>  [8,]  0.57166711  2.32272699 #>  [9,] -2.00932480 -1.20202334 #> [10,]  1.61770359 -0.11114129 #>  #> , , 5 #>  #>             [,1]       [,2] #>  [1,]  2.7267718  5.9435322 #>  [2,] -3.2860444 -3.5519548 #>  [3,]  5.0967298 -0.1122456 #>  [4,]  0.9504458 -2.2417675 #>  [5,] -0.1428236  0.5444726 #>  [6,]  0.9229196 -1.3428317 #>  [7,] -0.4404871 -0.3804046 #>  [8,]  0.8095281  2.5917576 #>  [9,] -2.6828935  0.9928416 #> [10,]  1.0290154 -0.2432622 #>"},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Log of Multivarate Gamma Function - Gamma_p(a) — lmvgamma","title":"Log of Multivarate Gamma Function - Gamma_p(a) — lmvgamma","text":"Log Multivarate Gamma Function - Gamma_p()","code":""},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log of Multivarate Gamma Function - Gamma_p(a) — lmvgamma","text":"","code":"lmvgamma(a, p)"},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log of Multivarate Gamma Function - Gamma_p(a) — lmvgamma","text":"defined Gamma_p() p defined Gamma_p()","code":""},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log of Multivarate Gamma Function - Gamma_p(a) — lmvgamma","text":"Numeric","code":""},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Log of Multivarate Gamma Function - Gamma_p(a) — lmvgamma","text":"https://en.wikipedia.org/wiki/Multivariate_gamma_function","code":""},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma_deriv.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivative of Log of Multivariate Gamma Function - Gamma_p(a) — lmvgamma_deriv","title":"Derivative of Log of Multivariate Gamma Function - Gamma_p(a) — lmvgamma_deriv","text":"Derivative Log Multivariate Gamma Function - Gamma_p()","code":""},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma_deriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivative of Log of Multivariate Gamma Function - Gamma_p(a) — lmvgamma_deriv","text":"","code":"lmvgamma_deriv(a, p)"},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma_deriv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivative of Log of Multivariate Gamma Function - Gamma_p(a) — lmvgamma_deriv","text":"defined Gamma_p() p defined Gamma_p()","code":""},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma_deriv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivative of Log of Multivariate Gamma Function - Gamma_p(a) — lmvgamma_deriv","text":"Numeric","code":""},{"path":"https://jsilve24.github.io/fido/reference/lmvgamma_deriv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Derivative of Log of Multivariate Gamma Function - Gamma_p(a) — lmvgamma_deriv","text":"https://en.wikipedia.org/wiki/Multivariate_gamma_function","code":""},{"path":"https://jsilve24.github.io/fido/reference/loglikMaltipooCollapsed.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculations for the Collapsed Maltipoo Model — loglikMaltipooCollapsed","title":"Calculations for the Collapsed Maltipoo Model — loglikMaltipooCollapsed","text":"Functions providing access Log Likelihood, Gradient, Hessian collapsed maltipoo model. Note: convenience functions optimized direct coding MaltipooCollapsed C++ class due lack Memoization. contrast function optimMaltipooCollapsed much optimized massively cuts repeated calculations. efficient Rcpp module based implementation functions may following future. model details see optimMaltipooCollapsed documentation","code":""},{"path":"https://jsilve24.github.io/fido/reference/loglikMaltipooCollapsed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculations for the Collapsed Maltipoo Model — loglikMaltipooCollapsed","text":"","code":"loglikMaltipooCollapsed(Y, upsilon, Theta, X, KInv, U, eta, ell, sylv = FALSE)  gradMaltipooCollapsed(Y, upsilon, Theta, X, KInv, U, eta, ell, sylv = FALSE)  hessMaltipooCollapsed(Y, upsilon, Theta, X, KInv, U, eta, ell, sylv = FALSE)"},{"path":"https://jsilve24.github.io/fido/reference/loglikMaltipooCollapsed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculations for the Collapsed Maltipoo Model — loglikMaltipooCollapsed","text":"Y D x N matrix counts upsilon (must > D) Theta D-1 x Q matrix prior mean regression coefficients X Q x N matrix covariates KInv D-1 x D-1 symmetric positive-definite matrix U PQxQ matrix stacked variance components eta matrix (D-1)xN parameter values calculate quantities ell P-vector scale factors variance component (aka VCScale) sylv (default:false) true N < D-1 use sylvester determinant identity speed computation","code":""},{"path":"https://jsilve24.github.io/fido/reference/loglikMaltipooCollapsed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculations for the Collapsed Maltipoo Model — loglikMaltipooCollapsed","text":"see  loglikMaltipooCollapsed - double gradMaltipooCollapsed - vector hessMaltipooCollapsed- matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/loglikPibbleCollapsed.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculations for the Collapsed Pibble Model — loglikPibbleCollapsed","title":"Calculations for the Collapsed Pibble Model — loglikPibbleCollapsed","text":"Functions providing access Log Likelihood, Gradient, Hessian collapsed pibble model. Note: convenience functions optimized direct coding PibbleCollapsed C++ class due lack Memoization. contrast function optimPibbleCollapsed much optimized massively cuts repeated calculations. efficient Rcpp module based implementation functions may following future. model details see optimPibbleCollapsed documentation","code":""},{"path":"https://jsilve24.github.io/fido/reference/loglikPibbleCollapsed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculations for the Collapsed Pibble Model — loglikPibbleCollapsed","text":"","code":"loglikPibbleCollapsed(Y, upsilon, ThetaX, KInv, AInv, eta, sylv = FALSE)  gradPibbleCollapsed(Y, upsilon, ThetaX, KInv, AInv, eta, sylv = FALSE)  hessPibbleCollapsed(Y, upsilon, ThetaX, KInv, AInv, eta, sylv = FALSE)"},{"path":"https://jsilve24.github.io/fido/reference/loglikPibbleCollapsed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculations for the Collapsed Pibble Model — loglikPibbleCollapsed","text":"Y D x N matrix counts upsilon (must > D) ThetaX D-1 x N matrix formed Theta*X (Theta Prior mean regression coefficients) KInv Inverse K LTP (Pibble defined KInv = solve(Xi)) AInv Inverse LTP (Pibble defined AInv = solve(diag(N)+ X'GammaX) ) eta matrix (D-1)xN parameter values calculate quantities sylv (default:false) true N < D-1 use sylvester determinant identity speed computation","code":""},{"path":"https://jsilve24.github.io/fido/reference/loglikPibbleCollapsed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculations for the Collapsed Pibble Model — loglikPibbleCollapsed","text":"see loglikPibbleCollapsed - double gradPibbleCollapsed - vector hessPibbleCollapsed- matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/loglikPibbleCollapsed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculations for the Collapsed Pibble Model — loglikPibbleCollapsed","text":"","code":"D <- 10 Q <- 2 N <- 30  # Simulate Data Sigma <- diag(sample(1:8, D-1, replace=TRUE)) Sigma[2, 3] <- Sigma[3,2] <- -1 Gamma <- diag(sqrt(rnorm(Q)^2)) Theta <- matrix(0, D-1, Q) Phi <-  Theta + t(chol(Sigma))%*%matrix(rnorm(Q*(D-1)), nrow=D-1)%*%chol(Gamma) X <- matrix(rnorm(N*(Q-1)), Q-1, N) X <- rbind(1, X) Eta <- Phi%*%X + t(chol(Sigma))%*%matrix(rnorm(N*(D-1)), nrow=D-1) Pi <- t(alrInv(t(Eta))) Y <- matrix(0, D, N) for (i in 1:N) Y[,i] <- rmultinom(1, sample(5000:10000), prob = Pi[,i])  # Priors upsilon <- D+10 Xi <- Sigma*(upsilon-D)  # Precompute KInv <- solve(Xi) AInv <- solve(diag(N)+ t(X)%*%Gamma%*%X) ThetaX <- Theta%*%X   loglikPibbleCollapsed(Y, upsilon, ThetaX, KInv, AInv, Eta) #> [1] -195095.9 gradPibbleCollapsed(Y, upsilon, ThetaX, KInv, AInv, Eta)[1:5] #> [1] -4.7284477 -0.1509676  1.2405685  0.2829217  2.6895085 hessPibbleCollapsed(Y, upsilon, ThetaX, KInv, AInv, Eta)[1:5,1:5] #>               [,1]       [,2]        [,3]        [,4]          [,5] #> [1,] -395.55832129  0.3806120 -0.02360702 -0.06801042  393.92582730 #> [2,]    0.38061199 -8.4987346 -0.31053592 -0.10707949    6.35296890 #> [3,]   -0.02360702 -0.3105359 -1.22834285  0.10121428    0.81696424 #> [4,]   -0.06801042 -0.1070795  0.10121428 -0.48603619    0.04496538 #> [5,]  393.92582730  6.3529689  0.81696424  0.04496538 -413.36822195"},{"path":"https://jsilve24.github.io/fido/reference/mallard.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Silverman et al. (2018) Microbiome — mallard","title":"Data from Silverman et al. (2018) Microbiome — mallard","text":"High Resolution (hourly daily) sampling 4 vitro artificial gut models many technical replicates identify technical variation.","code":""},{"path":"https://jsilve24.github.io/fido/reference/mallard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Silverman et al. (2018) Microbiome — mallard","text":"","code":"data(mallard)"},{"path":"https://jsilve24.github.io/fido/reference/mallard.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Silverman et al. (2018) Microbiome — mallard","text":"list containing \"otu_table\", \"sample_data\", \"tax_table\", \"refseq\".","code":""},{"path":"https://jsilve24.github.io/fido/reference/mallard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from Silverman et al. (2018) Microbiome — mallard","text":"data sequence variant level. Data family level processed Silverman et al. 2018 given mallard_family","code":""},{"path":"https://jsilve24.github.io/fido/reference/mallard.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data from Silverman et al. (2018) Microbiome — mallard","text":"Silverman et al. \"Dynamic linear models guide design    analysis microbiota studies within artificial human guts\".    Microbiome 2018 6:202","code":""},{"path":"https://jsilve24.github.io/fido/reference/mallard_family.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Silverman et al. (2018) Microbiome — mallard_family","title":"Data from Silverman et al. (2018) Microbiome — mallard_family","text":"High Resolution (hourly daily) sampling 4 vitro artificial gut models many technical replicates identify technical variation.","code":""},{"path":"https://jsilve24.github.io/fido/reference/mallard_family.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Silverman et al. (2018) Microbiome — mallard_family","text":"","code":"data(mallard_family)"},{"path":"https://jsilve24.github.io/fido/reference/mallard_family.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Silverman et al. (2018) Microbiome — mallard_family","text":"list containing \"otu_table\", \"sample_data\", \"tax_table\", \"refseq\".","code":""},{"path":"https://jsilve24.github.io/fido/reference/mallard_family.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from Silverman et al. (2018) Microbiome — mallard_family","text":"data family level processed Silverman et al. 2018. Data sequence variant level without preprocessing given mallard","code":""},{"path":"https://jsilve24.github.io/fido/reference/mallard_family.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data from Silverman et al. (2018) Microbiome — mallard_family","text":"Silverman et al. \"Dynamic linear models guide design    analysis microbiota studies within artificial human guts\".    Microbiome 2018 6:202","code":""},{"path":"https://jsilve24.github.io/fido/reference/maltipoo_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to fit maltipoo models — maltipoo_fit","title":"Interface to fit maltipoo models — maltipoo_fit","text":"function largely user friendly wrapper around  optimMaltipooCollapsed  uncollapsePibble.  See details model specification.   Notation: N number samples,  D number multinomial categories, Q number  covariates, P number variance components   iter number samples eta (e.g.,  parameter n_samples function   optimPibbleCollapsed)","code":""},{"path":"https://jsilve24.github.io/fido/reference/maltipoo_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to fit maltipoo models — maltipoo_fit","text":"","code":"maltipoo(   Y = NULL,   X = NULL,   upsilon = NULL,   Theta = NULL,   U = NULL,   Xi = NULL,   init = NULL,   ellinit = NULL,   pars = c(\"Eta\", \"Lambda\", \"Sigma\"),   ... )"},{"path":"https://jsilve24.github.io/fido/reference/maltipoo_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to fit maltipoo models — maltipoo_fit","text":"Y D x N matrix counts (NULL uses priors ) X Q x N matrix covariates (design matrix) (NULL uses priors , must present sample Eta) upsilon dof inverse wishart prior (numeric must > D) (default: D+3) Theta (D-1) x Q matrix prior mean regression parameters (default: matrix(0, D-1, Q)) U PQ x Q matrix stacked variance components (dimension Q x Q) Xi (D-1)x(D-1) prior covariance matrix (default: ALR transform diag(1)*(upsilon-D)/2 - essentially iid \"base scale\" using Aitchison terminology) init (D-1) x Q initialization Eta optimization ellinit P vector initialization values ell optimization pars character vector posterior parameters return ... arguments passed optimPibbleCollapsed uncollapsePibble","code":""},{"path":"https://jsilve24.github.io/fido/reference/maltipoo_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface to fit maltipoo models — maltipoo_fit","text":"object class maltipoofit","code":""},{"path":"https://jsilve24.github.io/fido/reference/maltipoo_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface to fit maltipoo models — maltipoo_fit","text":"full model given :    $$Y_j \\sim Multinomial(Pi_j)$$    $$Pi_j = Phi^{-1}(Eta_j)$$    $$Eta \\sim MN_{D-1 x N}(Lambda*X, Sigma, I_N)$$    $$Lambda \\sim MN_{D-1 x Q}(Theta, Sigma, Gamma)$$    $$Gamma = e^{ell_1} U_1 + ... + e^{ell_P} U_P$$    $$Sigma \\sim InvWish(upsilon, Xi)$$ \\(= (I_N + X * Gamma * X')^{-1}\\), \\(K^{-1} = Xi\\) (D-1)x(D-1)   covariance matrix, \\(U_1\\) Q x Q covariance matrix (variance component),   \\(e^{ell_i}\\) scale variance component \\(Phi^{-1}\\)   ALRInv_D transform. Default behavior use MAP estimate uncollaping collapsed maltipoo   model laplace approximation preformed. Parameters ell treated fixed estimated MAP estimation.","code":""},{"path":"https://jsilve24.github.io/fido/reference/maltipoofit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create maltipoofit object — maltipoofit","title":"Create maltipoofit object — maltipoofit","text":"Create maltipoofit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/maltipoofit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create maltipoofit object — maltipoofit","text":"","code":"maltipoofit(   D,   N,   Q,   P,   coord_system,   iter = NULL,   alr_base = NULL,   ilr_base = NULL,   Eta = NULL,   Lambda = NULL,   Sigma = NULL,   Sigma_default = NULL,   Y = NULL,   X = NULL,   upsilon = NULL,   Theta = NULL,   Xi = NULL,   Xi_default = NULL,   Gamma = NULL,   init = NULL,   ellinit = NULL,   names_categories = NULL,   names_samples = NULL,   names_covariates = NULL,   VCScale = NULL,   U = NULL )"},{"path":"https://jsilve24.github.io/fido/reference/maltipoofit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create maltipoofit object — maltipoofit","text":"D number multinomial categories N number samples Q number covariates P number variance components coord_system coordinate system objects represented (options  include \"alr\", \"clr\", \"ilr\", \"proportions\") iter number posterior samples alr_base integer category used reference  (required coord_system==\"alr\") ilr_base (D x D-1) contrast matrix (required coord_system==\"ilr\") Eta Array samples Eta Lambda Array samples Lambda Sigma Array samples Sigma (null coord_system==\"proportions\") Sigma_default Array samples Sigma alr base D, used  coord_system==\"proportions\" Y DxN matrix observed counts X QxN design matrix upsilon scalar prior dof inverse wishart prior Theta prior mean Lambda Xi Matrix prior covariance inverse wishart  (null coord_system==\"proportions\") Xi_default Matrix prior covariance inverse wishart alr  base D (used coord_system==\"proportions\") Gamma QxQ covariance matrix prior Lambda init matrix initial guess Lambda used optimization ellinit P vector initialization values ell optimization names_categories character vector names_samples character vector names_covariates character vector VCScale scale factors (delta) variance components U PQ x Q matrix stacked variance components (dimension Q x Q)","code":""},{"path":"https://jsilve24.github.io/fido/reference/maltipoofit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create maltipoofit object — maltipoofit","text":"object class maltipoofit","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Silverman et al. (2019) bioRxiv — metadata","title":"Data from Silverman et al. (2019) bioRxiv — metadata","text":"Mock communities calibration samples created measuring validating model PCR bias. data preprocessed original manuscript.","code":""},{"path":"https://jsilve24.github.io/fido/reference/metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Silverman et al. (2019) bioRxiv — metadata","text":"data.frame metadata associated counts matrix `Y`","code":""},{"path":"https://jsilve24.github.io/fido/reference/metadata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data from Silverman et al. (2019) bioRxiv — metadata","text":"Justin D. Silverman, Rachael J. Bloom, Sharon Jiang, Heather K. Durand, Sayan Mukherjee,  Lawrence . David. (2019) Measuring Mitigating PCR Bias Microbiome Data.  bioRxiv 604025; doi: https://doi.org/10.1101/604025","code":""},{"path":"https://jsilve24.github.io/fido/reference/miniclo.html","id":null,"dir":"Reference","previous_headings":"","what":"Closure operator — miniclo","title":"Closure operator — miniclo","text":"Closure operator","code":""},{"path":"https://jsilve24.github.io/fido/reference/miniclo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closure operator — miniclo","text":"","code":"miniclo(x)"},{"path":"https://jsilve24.github.io/fido/reference/miniclo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Closure operator — miniclo","text":"x vector matrix (rows samples, parts columns) data simplex","code":""},{"path":"https://jsilve24.github.io/fido/reference/miniclo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Closure operator — miniclo","text":"x row entries divided sum row (converts vectors row matricies)","code":""},{"path":"https://jsilve24.github.io/fido/reference/miniclo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closure operator — miniclo","text":"","code":"x <- matrix(runif(30), 10, 3) x <- miniclo(x)"},{"path":"https://jsilve24.github.io/fido/reference/miniclo_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Closure Operation applied to array on margin — miniclo_array","title":"Closure Operation applied to array on margin — miniclo_array","text":"Array version miniclo.","code":""},{"path":"https://jsilve24.github.io/fido/reference/miniclo_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closure Operation applied to array on margin — miniclo_array","text":"","code":"miniclo_array(x, parts)"},{"path":"https://jsilve24.github.io/fido/reference/miniclo_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Closure Operation applied to array on margin — miniclo_array","text":"x multidimensional array parts index dimension x represents parts (e.g., compositional variables)","code":""},{"path":"https://jsilve24.github.io/fido/reference/miniclo_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Closure Operation applied to array on margin — miniclo_array","text":"array","code":""},{"path":"https://jsilve24.github.io/fido/reference/miniclo_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closure Operation applied to array on margin — miniclo_array","text":"","code":"x <- array(1:100, dim=c(10, 5, 2)) miniclo_array(x, parts=2) #> , , 1 #>  #>             [,1]      [,2] [,3]      [,4]      [,5] #>  [1,] 0.00952381 0.1047619  0.2 0.2952381 0.3904762 #>  [2,] 0.01818182 0.1090909  0.2 0.2909091 0.3818182 #>  [3,] 0.02608696 0.1130435  0.2 0.2869565 0.3739130 #>  [4,] 0.03333333 0.1166667  0.2 0.2833333 0.3666667 #>  [5,] 0.04000000 0.1200000  0.2 0.2800000 0.3600000 #>  [6,] 0.04615385 0.1230769  0.2 0.2769231 0.3538462 #>  [7,] 0.05185185 0.1259259  0.2 0.2740741 0.3481481 #>  [8,] 0.05714286 0.1285714  0.2 0.2714286 0.3428571 #>  [9,] 0.06206897 0.1310345  0.2 0.2689655 0.3379310 #> [10,] 0.06666667 0.1333333  0.2 0.2666667 0.3333333 #>  #> , , 2 #>  #>            [,1]      [,2] [,3]      [,4]      [,5] #>  [1,] 0.1436620 0.1718310  0.2 0.2281690 0.2563380 #>  [2,] 0.1444444 0.1722222  0.2 0.2277778 0.2555556 #>  [3,] 0.1452055 0.1726027  0.2 0.2273973 0.2547945 #>  [4,] 0.1459459 0.1729730  0.2 0.2270270 0.2540541 #>  [5,] 0.1466667 0.1733333  0.2 0.2266667 0.2533333 #>  [6,] 0.1473684 0.1736842  0.2 0.2263158 0.2526316 #>  [7,] 0.1480519 0.1740260  0.2 0.2259740 0.2519481 #>  [8,] 0.1487179 0.1743590  0.2 0.2256410 0.2512821 #>  [9,] 0.1493671 0.1746835  0.2 0.2253165 0.2506329 #> [10,] 0.1500000 0.1750000  0.2 0.2250000 0.2500000 #>"},{"path":"https://jsilve24.github.io/fido/reference/mongrel-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"mongrel — mongrel-deprecated","title":"mongrel — mongrel-deprecated","text":"function deprecated, please use pibble  instead.","code":""},{"path":"https://jsilve24.github.io/fido/reference/mongrel-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mongrel — mongrel-deprecated","text":"","code":"mongrel(   Y = NULL,   X = NULL,   upsilon = NULL,   Theta = NULL,   Gamma = NULL,   Xi = NULL,   init = NULL,   pars = c(\"Eta\", \"Lambda\", \"Sigma\"),   ... )"},{"path":"https://jsilve24.github.io/fido/reference/mongrel-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mongrel — mongrel-deprecated","text":"Y D x N matrix counts (NULL uses priors ) X Q x N matrix covariates (design matrix) (NULL uses priors , must present sample Eta) upsilon dof inverse wishart prior (numeric must > D) (default: D+3) Theta (D-1) x Q matrix prior mean regression parameters (default: matrix(0, D-1, Q)) Gamma QxQ prior covariance matrix (default: diag(Q)) Xi (D-1)x(D-1) prior covariance matrix (default: ALR transform diag(1)*(upsilon-D)/2 - essentially iid \"base scale\" using Aitchison terminology) init (D-1) x N initialization Eta optimization pars character vector posterior parameters return ... arguments passed optimPibbleCollapsed uncollapsePibble","code":""},{"path":"https://jsilve24.github.io/fido/reference/mongrel-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mongrel — mongrel-deprecated","text":"object class pibblefit","code":""},{"path":"https://jsilve24.github.io/fido/reference/name.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for applying names to an object — name","title":"Generic method for applying names to an object — name","text":"Intended called internally package","code":""},{"path":"https://jsilve24.github.io/fido/reference/name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for applying names to an object — name","text":"","code":"name(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for applying names to an object — name","text":"m object ... arguments passed","code":""},{"path":"https://jsilve24.github.io/fido/reference/name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for applying names to an object — name","text":"object class names applied dimensions","code":""},{"path":"https://jsilve24.github.io/fido/reference/name.orthusfit.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 for orthusfit apply names to orthusfit object — name.orthusfit","title":"S3 for orthusfit apply names to orthusfit object — name.orthusfit","text":"avoid confusion, assigned default names multinomial categories (c1 etc...)  zdimensions (z1 etc...)","code":""},{"path":"https://jsilve24.github.io/fido/reference/name.orthusfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 for orthusfit apply names to orthusfit object — name.orthusfit","text":"","code":"# S3 method for orthusfit name(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/name.orthusfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 for orthusfit apply names to orthusfit object — name.orthusfit","text":"m object class orthusfit ... currently ignored","code":""},{"path":"https://jsilve24.github.io/fido/reference/name.orthusfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 for orthusfit apply names to orthusfit object — name.orthusfit","text":"object class orthusfit","code":""},{"path":"https://jsilve24.github.io/fido/reference/name.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 for pibblefit apply names to pibblefit object — name.pibblefit","title":"S3 for pibblefit apply names to pibblefit object — name.pibblefit","text":"S3 pibblefit apply names pibblefit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/name.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 for pibblefit apply names to pibblefit object — name.pibblefit","text":"","code":"# S3 method for pibblefit name(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/name.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 for pibblefit apply names to pibblefit object — name.pibblefit","text":"m object class pibblefit ... currently ignored","code":""},{"path":"https://jsilve24.github.io/fido/reference/name.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 for pibblefit apply names to pibblefit object — name.pibblefit","text":"object class pibblefit","code":""},{"path":"https://jsilve24.github.io/fido/reference/name_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for getting and setting dimension names of fit object — names_covariates.pibblefit","title":"Generic method for getting and setting dimension names of fit object — names_covariates.pibblefit","text":"Generic method getting setting dimension names fit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/name_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for getting and setting dimension names of fit object — names_covariates.pibblefit","text":"","code":"# S3 method for pibblefit names_covariates(m)  # S3 method for pibblefit names_samples(m)  # S3 method for pibblefit names_categories(m)  # S3 method for pibblefit names_coords(m)  # S3 method for pibblefit names_covariates(m) <- value  # S3 method for pibblefit names_samples(m) <- value  # S3 method for pibblefit names_categories(m) <- value  names_covariates(m)  names_samples(m)  names_categories(m)  names_coords(m)  names_covariates(m) <- value  names_samples(m) <- value  names_categories(m) <- value"},{"path":"https://jsilve24.github.io/fido/reference/name_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for getting and setting dimension names of fit object — names_covariates.pibblefit","text":"m object value character vector (NULL)","code":""},{"path":"https://jsilve24.github.io/fido/reference/name_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for getting and setting dimension names of fit object — names_covariates.pibblefit","text":"vector names","code":""},{"path":"https://jsilve24.github.io/fido/reference/name_dims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic method for getting and setting dimension names of fit object — names_covariates.pibblefit","text":"names_coords different names_categories.  names_categories provides access basic names multinomial  category. contrast, names_coords provides access  names coordinates object represented. coordinate names based category names. example, category names may ,  (OTU1, ..., OTUD) coordinate names (log(OTU1/OTUD), etc...) object default coordinate system.","code":""},{"path":"https://jsilve24.github.io/fido/reference/optimMaltipooCollapsed.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Optimize the Collapsed Maltipoo Model — optimMaltipooCollapsed","title":"Function to Optimize the Collapsed Maltipoo Model — optimMaltipooCollapsed","text":"See details model. likely followed function uncollapsePibble. Notation: N number samples, D number multinomial categories, Q number covariates.","code":""},{"path":"https://jsilve24.github.io/fido/reference/optimMaltipooCollapsed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Optimize the Collapsed Maltipoo Model — optimMaltipooCollapsed","text":"","code":"optimMaltipooCollapsed(   Y,   upsilon,   Theta,   X,   KInv,   U,   init,   ellinit,   n_samples = 2000L,   calcGradHess = TRUE,   b1 = 0.9,   b2 = 0.99,   step_size = 0.003,   epsilon = 1e-06,   eps_f = 1e-10,   eps_g = 1e-04,   max_iter = 10000L,   verbose = FALSE,   verbose_rate = 10L,   decomp_method = \"cholesky\",   eigvalthresh = 0,   jitter = 0 )"},{"path":"https://jsilve24.github.io/fido/reference/optimMaltipooCollapsed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Optimize the Collapsed Maltipoo Model — optimMaltipooCollapsed","text":"Y D x N matrix counts upsilon (must > D) Theta D-1 x Q matrix prior mean regression coefficients X Q x N matrix covariates KInv D-1 x D-1 symmetric positive-definite matrix U PQxQ matrix stacked variance components init D-1 x N matrix initial guess eta used optimization ellinit P vector initial guess ell used optimization n_samples number samples Laplace Approximation (=0 fast inversion decomposition Hessian required) calcGradHess n_samples=0 Gradient Hessian still calculated using closed form solutions? b1 (ADAM) 1st moment decay parameter (recommend 0.9) \"aka momentum\" b2 (ADAM) 2nd moment decay parameter (recommend 0.99 0.999) step_size (ADAM) step size descent (recommend 0.001-0.003) epsilon (ADAM) parameter avoid divide zero eps_f (ADAM) normalized function improvement stopping criteria eps_g (ADAM) normalized gradient magnitude stopping criteria max_iter (ADAM) maximum number iterations stopping verbose (ADAM) true print stats stopping criteria iteration number verbose_rate (ADAM) rate print verbose stats screen decomp_method decomposition hessian Laplace approximation 'eigen' (stable-slightly, slower) 'cholesky' (less stable, faster, default) eigvalthresh threshold negative eigenvalues decomposition negative inverse hessian (<=0) jitter (default: 0) >0 adds factor diagonal Hessian decomposition (improve matrix conditioning)","code":""},{"path":"https://jsilve24.github.io/fido/reference/optimMaltipooCollapsed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Optimize the Collapsed Maltipoo Model — optimMaltipooCollapsed","text":"List containing (respect found optima) LogLik - Log Likelihood collapsed model (proportionality constant) Gradient - (calcGradHess=true) Hessian - (calcGradHess=true) POSITIVE log posterior Pars - Parameter value eta Samples - (D-1) x N x n_samples array containing posterior samples eta based Laplace approximation (n_samples>0) VCScale - value e^ell_i optima logInvNegHessDet - log determinant covariacne Laplace approximation, useful calculating marginal likelihood","code":""},{"path":"https://jsilve24.github.io/fido/reference/optimMaltipooCollapsed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to Optimize the Collapsed Maltipoo Model — optimMaltipooCollapsed","text":"Notation: Let Z_j denote J-th row matrix Z. Model: $$Y_j \\sim Multinomial(Pi_j)$$ $$Pi_j = Phi^{-1}(Eta_j)$$ $$Eta \\sim T_{D-1, N}(upsilon, Theta*X, K, )$$ \\(= (I_N + e^{ell_1}*X*U_1*X' + ... + e^{ell_P}*X*U_P*X' )\\), K D-1xD-1 covariance Phi ALRInv_D transform. Gradient Hessian calculations fast computed using closed form solutions. said, Hessian matrix can quite large [N\\(D-1) x N\\(D-1)] storage may issue. Note: Warnings large negative eigenvalues can either signal optimizer reach optima (commonly experience) prior / degrees freedom covariance (given parameters upsilon KInv) specific odds observed data. get warning try following. Try restarting optimization using different initial guess eta Try decreasing (even increasing)step_size (increments 0.001 0.002) increasing max_iter parameters optimizer. Also can try increasing b1 0.99 decreasing eps_f orders magnitude Try relaxing prior assumptions regarding covariance matrix. (e.g., may want consider decreasing parameter upsilon closer minimum value D) Try adding small amount jitter (e.g., set jitter=1e-5) address potential floating point errors.","code":""},{"path":"https://jsilve24.github.io/fido/reference/optimMaltipooCollapsed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to Optimize the Collapsed Maltipoo Model — optimMaltipooCollapsed","text":"S. Ruder (2016) overview gradient descent optimization algorithms. arXiv 1609.04747","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/optimPibbleCollapsed.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Optimize the Collapsed Pibble Model — optimPibbleCollapsed","title":"Function to Optimize the Collapsed Pibble Model — optimPibbleCollapsed","text":"See details model. likely followed function uncollapsePibble. Notation: N number samples, D number multinomial categories, Q number covariates.","code":""},{"path":"https://jsilve24.github.io/fido/reference/optimPibbleCollapsed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Optimize the Collapsed Pibble Model — optimPibbleCollapsed","text":"","code":"optimPibbleCollapsed(   Y,   upsilon,   ThetaX,   KInv,   AInv,   init,   n_samples = 2000L,   calcGradHess = TRUE,   b1 = 0.9,   b2 = 0.99,   step_size = 0.003,   epsilon = 1e-06,   eps_f = 1e-10,   eps_g = 1e-04,   max_iter = 10000L,   verbose = FALSE,   verbose_rate = 10L,   decomp_method = \"cholesky\",   optim_method = \"lbfgs\",   eigvalthresh = 0,   jitter = 0,   multDirichletBoot = -1,   useSylv = TRUE,   ncores = -1L,   seed = -1L )"},{"path":"https://jsilve24.github.io/fido/reference/optimPibbleCollapsed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Optimize the Collapsed Pibble Model — optimPibbleCollapsed","text":"Y D x N matrix counts upsilon (must > D) ThetaX D-1 x N matrix formed Theta*X (Theta Prior mean regression coefficients) KInv D-1 x D-1 precision matrix (inverse Xi) AInv N x N precision matrix given \\((I_N + X'*Gamma*X)^{-1}\\) init D-1 x N matrix initial guess eta used optimization n_samples number samples Laplace Approximation (=0 fast inversion decomposition Hessian required) calcGradHess n_samples=0 Gradient Hessian still calculated using closed form solutions? b1 (ADAM) 1st moment decay parameter (recommend 0.9) \"aka momentum\" b2 (ADAM) 2nd moment decay parameter (recommend 0.99 0.999) step_size (ADAM) step size descent (recommend 0.001-0.003) epsilon (ADAM) parameter avoid divide zero eps_f (ADAM) normalized function improvement stopping criteria eps_g (ADAM) normalized gradient magnitude stopping criteria max_iter (ADAM) maximum number iterations stopping verbose (ADAM) true print stats stopping criteria iteration number verbose_rate (ADAM) rate print verbose stats screen decomp_method decomposition hessian Laplace approximation 'eigen' (stable-slightly, slower) 'cholesky' (less stable, faster, default) optim_method (default:\"lbfgs\") \"adam\" eigvalthresh threshold negative eigenvalues decomposition negative inverse hessian (<=0) jitter (default: 0) >=0 adds factor diagonal Hessian decomposition (improve matrix conditioning) multDirichletBoot >0 overrides laplace approximation samples eta efficiently MAP estimate pseudo Multinomial-Dirichlet posterior. useSylv (default: true) N<D-1 uses Sylvester Determinant Identity speed calculation log-likelihood gradients. ncores (default:-1) number cores use, ncores==-1 uses default OpenMP typically use available cores. seed (random seed Laplace approximation -- integer)","code":""},{"path":"https://jsilve24.github.io/fido/reference/optimPibbleCollapsed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Optimize the Collapsed Pibble Model — optimPibbleCollapsed","text":"List containing (respect found optima) LogLik - Log Likelihood collapsed model (proportionality constant) Gradient - (calcGradHess=true) Hessian - (calcGradHess=true) POSITIVE LOG POSTERIOR Pars - Parameter value eta optima Samples - (D-1) x N x n_samples array containing posterior samples eta based Laplace approximation (n_samples>0) Timer - Vector Execution Times logInvNegHessDet - log determinant covariacne Laplace approximation, useful calculating marginal likelihood logMarginalLikelihood - calculation log marginal likelihood based laplace approximation","code":""},{"path":"https://jsilve24.github.io/fido/reference/optimPibbleCollapsed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to Optimize the Collapsed Pibble Model — optimPibbleCollapsed","text":"Notation: Let Z_j denote J-th row matrix Z. Model: $$Y_j \\sim Multinomial(Pi_j)$$ $$Pi_j = Phi^{-1}(Eta_j)$$ $$Eta \\sim T_{D-1, N}(upsilon, Theta*X, K, )$$ \\(= I_N + X * Gamma * X'\\), K (D-1)x(D-1) covariance matrix, Gamma Q x Q covariance matrix, \\(Phi^{-1}\\) ALRInv_D transform. Gradient Hessian calculations fast computed using closed form solutions. said, Hessian matrix can quite large [N*(D-1) x N*(D-1)] storage may issue. Note: Warnings large negative eigenvalues can either signal optimizer reach optima (commonly experience) prior / degrees freedom covariance (given parameters upsilon KInv) specific odds observed data. get warning try following. Try restarting optimization using different initial guess eta Try decreasing (even increasing )step_size (increments 0.001 0.002) increasing max_iter parameters optimizer. Also can try increasing b1 0.99 decreasing eps_f orders magnitude Try relaxing prior assumptions regarding covariance matrix. (e.g., may want consider decreasing parameter upsilon closer minimum value D) Try adding small amount jitter (e.g., set jitter=1e-5) address potential floating point errors.","code":""},{"path":"https://jsilve24.github.io/fido/reference/optimPibbleCollapsed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to Optimize the Collapsed Pibble Model — optimPibbleCollapsed","text":"S. Ruder (2016) overview gradient descent optimization algorithms. arXiv 1609.04747 JD Silverman K Roche, ZC Holmes, LA David, S Mukherjee. Bayesian Multinomial Logistic Normal Models Marginally Latent Matrix-T Processes. 2022, Journal Machine Learning","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/optimPibbleCollapsed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to Optimize the Collapsed Pibble Model — optimPibbleCollapsed","text":"","code":"sim <- pibble_sim()  # Fit model for eta fit <- optimPibbleCollapsed(sim$Y, sim$upsilon, sim$Theta%*%sim$X, sim$KInv,                               sim$AInv, random_pibble_init(sim$Y))"},{"path":"https://jsilve24.github.io/fido/reference/orthus_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to fit orthus models — orthus_fit","title":"Interface to fit orthus models — orthus_fit","text":"function largely user friendly wrapper around optimPibbleCollapsed uncollapsePibble fitting orthus models. See details model specification. Notation: N number samples, P number dimensions observations second dataset, D number multinomial categories, Q number covariates, iter number samples eta (e.g., parameter n_samples function optimPibbleCollapsed)","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to fit orthus models — orthus_fit","text":"","code":"orthus(   Y = NULL,   Z = NULL,   X = NULL,   upsilon = NULL,   Theta = NULL,   Gamma = NULL,   Xi = NULL,   init = NULL,   pars = c(\"Eta\", \"Lambda\", \"Sigma\"),   ... )"},{"path":"https://jsilve24.github.io/fido/reference/orthus_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to fit orthus models — orthus_fit","text":"Y D x N matrix counts (NULL uses priors ) Z P x N matrix counts (NULL uses priors - must present/absent Y present/absent) X Q x N matrix covariates (design matrix) (NULL uses priors , must present sample Eta) upsilon dof inverse wishart prior (numeric must > D) (default: D+3) Theta (D-1+P) x Q matrix prior mean regression parameters (default: matrix(0, D-1+P, Q)) Gamma QxQ prior covariance matrix (default: diag(Q)) Xi (D-1+P)x(D-1+P) prior covariance matrix (default: ALR transform diag(1)*(upsilon-D)/2 - essentially iid \"base scale\" using Aitchison terminology) init (D-1) x Q initialization Eta optimization pars character vector posterior parameters return ... arguments passed optimPibbleCollapsed uncollapsePibble","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface to fit orthus models — orthus_fit","text":"object class pibblefit","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface to fit orthus models — orthus_fit","text":"full model given : $$Y_j \\sim Multinomial(Pi_j)$$ $$Pi_j = Phi^{-1}(Eta_j)$$ $$cbind(Eta, Z) \\sim MN_{D-1+P x N}(Lambda*X, Sigma, I_N)$$ $$Lambda \\sim MN_{D-1+P x Q}(Theta, Sigma, Gamma)$$ $$Sigma \\sim InvWish(upsilon, Xi)$$ Gamma Q x Q covariance matrix, \\(Phi^{-1}\\) ALRInv_D transform. , orthus model models latent multinomial log-ratios (Eta) observations second dataset jointly linear model. allows Sigma also describe covariation two datasets. Default behavior use MAP estimate uncollaping LTP model laplace approximation preformed.","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_fit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Interface to fit orthus models — orthus_fit","text":"JD Silverman K Roche, ZC Holmes, LA David, S Mukherjee.    Bayesian Multinomial Logistic Normal Models Marginally Latent Matrix-T Processes.    2019, arXiv e-prints, arXiv:1903.11695","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/orthus_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interface to fit orthus models — orthus_fit","text":"","code":"sim <- orthus_sim() fit <- orthus(sim$Y, sim$Z, sim$X)"},{"path":"https://jsilve24.github.io/fido/reference/orthus_lr_transforms.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Ratio transforms for orthus objects — orthus_lr_transforms","title":"Log-Ratio transforms for orthus objects — orthus_lr_transforms","text":"Log-Ratio transforms orthus objects","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_lr_transforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Ratio transforms for orthus objects — orthus_lr_transforms","text":"","code":"oglr(x, s, V)  oglrInv(x, s, V)  oalr(x, s, d = NULL)  oalrInv(y, s, d = NULL)  oilr(x, s, V = NULL)  oilrInv(y, s, V = NULL)  oclr(x, s)  oclrInv(x, s)"},{"path":"https://jsilve24.github.io/fido/reference/orthus_lr_transforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Ratio transforms for orthus objects — orthus_lr_transforms","text":"x orthus data array (e.g., first s rows multinomial parameters log-ratios) s first s rows x transformed V transformation matrix (defines transform) d ALR, component (integer position) take reference (default ncol(x)) alrInv corresponds column position untransformed matrix. y orthus data array (e.g., first s rows multinomial parameters log-ratios)","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_lr_transforms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Ratio transforms for orthus objects — orthus_lr_transforms","text":"matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate simple orthus dataset and priors (for testing) — orthus_sim","title":"Simulate simple orthus dataset and priors (for testing) — orthus_sim","text":"Simulate simple orthus dataset priors (testing)","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate simple orthus dataset and priors (for testing) — orthus_sim","text":"","code":"orthus_sim(   D = 10,   P = 10,   N = 30,   Q = 2,   use_names = TRUE,   true_priors = FALSE )"},{"path":"https://jsilve24.github.io/fido/reference/orthus_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate simple orthus dataset and priors (for testing) — orthus_sim","text":"D number multinomial categories P number dimensions second dataset Z N number samples Q number covariates (first one intercept, must > 1) use_names samples, covariates, categories named true_priors Xi upsilon chosen mean true  simulated value","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate simple orthus dataset and priors (for testing) — orthus_sim","text":"list","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate simple orthus dataset and priors (for testing) — orthus_sim","text":"","code":"sim <- orthus_sim()"},{"path":"https://jsilve24.github.io/fido/reference/orthus_tidy_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert orthus samples of Eta Lambda and Sigma to tidy format — orthus_tidy_samples","title":"Convert orthus samples of Eta Lambda and Sigma to tidy format — orthus_tidy_samples","text":"Combines single tibble, see example formatting  column headers. Primarily designed used  summary.orthusfit.","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_tidy_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert orthus samples of Eta Lambda and Sigma to tidy format — orthus_tidy_samples","text":"","code":"orthus_tidy_samples(m, use_names = FALSE, as_factor = FALSE)"},{"path":"https://jsilve24.github.io/fido/reference/orthus_tidy_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert orthus samples of Eta Lambda and Sigma to tidy format — orthus_tidy_samples","text":"m object class orthusfit use_names dimension indices replaced dimension names provided data used fit pibble model. as_factor use_names names returned factor?","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_tidy_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert orthus samples of Eta Lambda and Sigma to tidy format — orthus_tidy_samples","text":"tibble","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthus_tidy_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert orthus samples of Eta Lambda and Sigma to tidy format — orthus_tidy_samples","text":"","code":"sim <- orthus_sim() fit <- orthus(sim$Y, sim$Z, sim$X) fit_tidy <- orthus_tidy_samples(fit, use_names=TRUE) head(fit_tidy) #>   Parameter       coord sample iter        val covariate coord2 #> 1       Eta log(c1/c10)     s1    1  1.7948781      <NA>   <NA> #> 2       Eta log(c2/c10)     s1    1  1.7951016      <NA>   <NA> #> 3       Eta log(c3/c10)     s1    1 -0.5377656      <NA>   <NA> #> 4       Eta log(c4/c10)     s1    1 -1.0677600      <NA>   <NA> #> 5       Eta log(c5/c10)     s1    1  0.2619309      <NA>   <NA> #> 6       Eta log(c6/c10)     s1    1 -2.0372487      <NA>   <NA>"},{"path":"https://jsilve24.github.io/fido/reference/orthusfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create orthusfit object — orthusfit","title":"Create orthusfit object — orthusfit","text":"Create orthusfit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthusfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create orthusfit object — orthusfit","text":"","code":"orthusfit(   D,   N,   Q,   P,   coord_system,   iter = NULL,   alr_base = NULL,   ilr_base = NULL,   Eta = NULL,   Lambda = NULL,   Sigma = NULL,   Sigma_default = NULL,   Z = NULL,   Y = NULL,   X = NULL,   upsilon = NULL,   Theta = NULL,   Xi = NULL,   Xi_default = NULL,   Gamma = NULL,   init = NULL,   names_categories = NULL,   names_samples = NULL,   names_Zdimensions = NULL,   names_covariates = NULL )"},{"path":"https://jsilve24.github.io/fido/reference/orthusfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create orthusfit object — orthusfit","text":"D number multinomial categories N number samples Q number covariates P Dimension second dataset (e.g., nrows(Z) ) coord_system coordinate system objects represented (options  include \"alr\", \"clr\", \"ilr\", \"proportions\") iter number posterior samples alr_base integer category used reference  (required coord_system==\"alr\") ilr_base (D x D-1) contrast matrix (required coord_system==\"ilr\") Eta Array samples Eta Lambda Array samples Lambda Sigma Array samples Sigma (null coord_system==\"proportions\") Sigma_default Array samples Sigma alr base D, used  coord_system==\"proportions\" Z PxN matrix real valued observations Y DxN matrix observed counts X QxN design matrix upsilon scalar prior dof inverse wishart prior Theta prior mean Lambda Xi Matrix prior covariance inverse wishart  (null coord_system==\"proportions\") Xi_default Matrix prior covariance inverse wishart alr  base D (used coord_system==\"proportions\") Gamma QxQ covariance matrix prior Lambda init matrix initial guess Lambda used optimization names_categories character vector names_samples character vector names_Zdimensions character vector names_covariates character vector","code":""},{"path":"https://jsilve24.github.io/fido/reference/orthusfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create orthusfit object — orthusfit","text":"object class orthusfit","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/pcrbias_mock.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Silverman et al. (2019) bioRxiv — pcrbias_mock","title":"Data from Silverman et al. (2019) bioRxiv — pcrbias_mock","text":"Mock communities calibration samples created measuring validating model PCR bias. data preprocessed original manuscript.","code":""},{"path":"https://jsilve24.github.io/fido/reference/pcrbias_mock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Silverman et al. (2019) bioRxiv — pcrbias_mock","text":"","code":"data(pcrbias_mock)"},{"path":"https://jsilve24.github.io/fido/reference/pcrbias_mock.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Silverman et al. (2019) bioRxiv — pcrbias_mock","text":"matrix Y (counts community member) data.frame metadata","code":""},{"path":"https://jsilve24.github.io/fido/reference/pcrbias_mock.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data from Silverman et al. (2019) bioRxiv — pcrbias_mock","text":"Justin D. Silverman, Rachael J. Bloom, Sharon Jiang, Heather K. Durand, Sayan Mukherjee,  Lawrence . David. (2019) Measuring Mitigating PCR Bias Microbiome Data.  bioRxiv 604025; doi: https://doi.org/10.1101/604025","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to fit pibble models — pibble_fit","title":"Interface to fit pibble models — pibble_fit","text":"function largely user friendly wrapper around optimPibbleCollapsed uncollapsePibble. See details model specification. Notation: N number samples, D number multinomial categories, Q number covariates, iter number samples eta (e.g., parameter n_samples function optimPibbleCollapsed)","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to fit pibble models — pibble_fit","text":"","code":"pibble(   Y = NULL,   X = NULL,   upsilon = NULL,   Theta = NULL,   Gamma = NULL,   Xi = NULL,   init = NULL,   pars = c(\"Eta\", \"Lambda\", \"Sigma\"),   newdata = NULL,   ... )  # S3 method for pibblefit refit(m, pars = c(\"Eta\", \"Lambda\", \"Sigma\"), ...)"},{"path":"https://jsilve24.github.io/fido/reference/pibble_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to fit pibble models — pibble_fit","text":"Y D x N matrix counts (NULL uses priors ) X Q x N matrix covariates (design matrix) (NULL uses priors , must present sample Eta) upsilon dof inverse wishart prior (numeric must > D) (default: D+3) Theta (D-1) x Q matrix prior mean regression parameters (default: matrix(0, D-1, Q)) Gamma QxQ prior covariance matrix (default: diag(Q)) Xi (D-1)x(D-1) prior covariance matrix (default: ALR transform diag(1)*(upsilon-D)/2 - essentially iid \"base scale\" using Aitchison terminology) init (D-1) x N initialization Eta optimization pars character vector posterior parameters return newdata Default NULL. non-null, newdata used uncollapse sampler place X. ... arguments passed optimPibbleCollapsed uncollapsePibble m object class pibblefit","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface to fit pibble models — pibble_fit","text":"object class pibblefit","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface to fit pibble models — pibble_fit","text":"full model given : $$Y_j \\sim Multinomial(Pi_j)$$ $$Pi_j = Phi^{-1}(Eta_j)$$ $$Eta \\sim MN_{D-1 x N}(Lambda*X, Sigma, I_N)$$ $$Lambda \\sim MN_{D-1 x Q}(Theta, Sigma, Gamma)$$ $$Sigma \\sim InvWish(upsilon, Xi)$$ Gamma Q x Q covariance matrix, \\(Phi^{-1}\\) ALRInv_D transform. Default behavior use MAP estimate uncollaping LTP model laplace approximation preformed.","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_fit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Interface to fit pibble models — pibble_fit","text":"JD Silverman K Roche, ZC Holmes, LA David, S Mukherjee.    Bayesian Multinomial Logistic Normal Models Marginally Latent Matrix-T Processes.    2019, arXiv e-prints, arXiv:1903.11695","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/pibble_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interface to fit pibble models — pibble_fit","text":"","code":"sim <- pibble_sim() fit <- pibble(sim$Y, sim$X)"},{"path":"https://jsilve24.github.io/fido/reference/pibble_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate simple pibble dataset and priors (for testing) — pibble_sim","title":"Simulate simple pibble dataset and priors (for testing) — pibble_sim","text":"Simulate simple pibble dataset priors (testing)","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate simple pibble dataset and priors (for testing) — pibble_sim","text":"","code":"pibble_sim(D = 10, N = 30, Q = 2, use_names = TRUE, true_priors = FALSE)"},{"path":"https://jsilve24.github.io/fido/reference/pibble_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate simple pibble dataset and priors (for testing) — pibble_sim","text":"D number multinomial categories N number samples Q number covariates (first one intercept, must > 1) use_names samples, covariates, categories named true_priors Xi upsilon chosen mean true  simulated value","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate simple pibble dataset and priors (for testing) — pibble_sim","text":"list","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate simple pibble dataset and priors (for testing) — pibble_sim","text":"","code":"sim <- pibble_sim()"},{"path":"https://jsilve24.github.io/fido/reference/pibble_tidy_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert pibble samples of Eta Lambda and Sigma to tidy format — pibble_tidy_samples","title":"Convert pibble samples of Eta Lambda and Sigma to tidy format — pibble_tidy_samples","text":"Combines single tibble, see example formatting  column headers. Primarily designed used  summary.pibblefit.","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_tidy_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert pibble samples of Eta Lambda and Sigma to tidy format — pibble_tidy_samples","text":"","code":"pibble_tidy_samples(m, use_names = FALSE, as_factor = FALSE)"},{"path":"https://jsilve24.github.io/fido/reference/pibble_tidy_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert pibble samples of Eta Lambda and Sigma to tidy format — pibble_tidy_samples","text":"m object class pibblefit use_names dimension indices replaced dimension names provided data used fit pibble model. as_factor use_names names returned factor?","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_tidy_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert pibble samples of Eta Lambda and Sigma to tidy format — pibble_tidy_samples","text":"tibble","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibble_tidy_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert pibble samples of Eta Lambda and Sigma to tidy format — pibble_tidy_samples","text":"","code":"sim <- pibble_sim() fit <- pibble(sim$Y, sim$X) fit_tidy <- pibble_tidy_samples(fit, use_names=TRUE) head(fit_tidy) #>   Parameter       coord sample iter        val covariate coord2 #> 1       Eta log(c1/c10)     s1    1  4.0010376      <NA>   <NA> #> 2       Eta log(c2/c10)     s1    1  4.4812471      <NA>   <NA> #> 3       Eta log(c3/c10)     s1    1 -4.5202200      <NA>   <NA> #> 4       Eta log(c4/c10)     s1    1  5.5775444      <NA>   <NA> #> 5       Eta log(c5/c10)     s1    1 -0.2492499      <NA>   <NA> #> 6       Eta log(c6/c10)     s1    1  1.1798842      <NA>   <NA>"},{"path":"https://jsilve24.github.io/fido/reference/pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pibblefit object — pibblefit","title":"Create pibblefit object — pibblefit","text":"Create pibblefit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pibblefit object — pibblefit","text":"","code":"pibblefit(   D,   N,   Q,   coord_system,   iter = NULL,   alr_base = NULL,   ilr_base = NULL,   Eta = NULL,   Lambda = NULL,   Sigma = NULL,   Sigma_default = NULL,   Y = NULL,   X = NULL,   upsilon = NULL,   Theta = NULL,   Xi = NULL,   Xi_default = NULL,   Gamma = NULL,   init = NULL,   names_categories = NULL,   names_samples = NULL,   names_covariates = NULL )"},{"path":"https://jsilve24.github.io/fido/reference/pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pibblefit object — pibblefit","text":"D number multinomial categories N number samples Q number covariates coord_system coordinate system objects represented (options  include \"alr\", \"clr\", \"ilr\", \"proportions\") iter number posterior samples alr_base integer category used reference  (required coord_system==\"alr\") ilr_base (D x D-1) contrast matrix (required coord_system==\"ilr\") Eta Array samples Eta Lambda Array samples Lambda Sigma Array samples Sigma (null coord_system==\"proportions\") Sigma_default Array samples Sigma alr base D, used  coord_system==\"proportions\" Y DxN matrix observed counts X QxN design matrix upsilon scalar prior dof inverse wishart prior Theta prior mean Lambda Xi Matrix prior covariance inverse wishart  (null coord_system==\"proportions\") Xi_default Matrix prior covariance inverse wishart alr  base D (used coord_system==\"proportions\") Gamma QxQ covariance matrix prior Lambda init matrix initial guess Lambda used optimization names_categories character vector names_samples character vector names_covariates character vector","code":""},{"path":"https://jsilve24.github.io/fido/reference/pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pibblefit object — pibblefit","text":"object class pibblefit","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/plot.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Summaries of Posterior Distribution of pibblefit Parameters — plot.pibblefit","title":"Plot Summaries of Posterior Distribution of pibblefit Parameters — plot.pibblefit","text":"Plot Summaries Posterior Distribution pibblefit Parameters","code":""},{"path":"https://jsilve24.github.io/fido/reference/plot.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Summaries of Posterior Distribution of pibblefit Parameters — plot.pibblefit","text":"","code":"# S3 method for pibblefit plot(x, ...)"},{"path":"https://jsilve24.github.io/fido/reference/plot.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Summaries of Posterior Distribution of pibblefit Parameters — plot.pibblefit","text":"x object class pibblefit ... arguments passed plot.pibblefit (see details)","code":""},{"path":"https://jsilve24.github.io/fido/reference/plot.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Summaries of Posterior Distribution of pibblefit Parameters — plot.pibblefit","text":"ggplot object","code":""},{"path":"https://jsilve24.github.io/fido/reference/plot.pibblefit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Summaries of Posterior Distribution of pibblefit Parameters — plot.pibblefit","text":"arguments: `par` parameter plot (options: Lambda, Eta, Sigma)    (default=\"Lambda\") `focus.cov` vector covariates include plot (plots NULL) `focus.coord` vector coordinates include plot (plots NULL) `focus.sample` vector samples include plot (plots NULL) `use_names` TRUE, uses dimension names found data plot labels   rather using dimension integer indices.","code":""},{"path":"https://jsilve24.github.io/fido/reference/plot.pibblefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Summaries of Posterior Distribution of pibblefit Parameters — plot.pibblefit","text":"","code":"sim <- pibble_sim(N=10, D=4, Q=3) fit <- pibble(sim$Y, sim$X) plot(fit, par=\"Lambda\") #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  plot(fit, par=\"Sigma\")"},{"path":"https://jsilve24.github.io/fido/reference/ppc.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for visualizing posterior predictive checks — ppc","title":"Generic method for visualizing posterior predictive checks — ppc","text":"Generic method visualizing posterior predictive checks","code":""},{"path":"https://jsilve24.github.io/fido/reference/ppc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for visualizing posterior predictive checks — ppc","text":"","code":"ppc(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/ppc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for visualizing posterior predictive checks — ppc","text":"m object ... arguments passed control visualization","code":""},{"path":"https://jsilve24.github.io/fido/reference/ppc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for visualizing posterior predictive checks — ppc","text":"plot","code":""},{"path":"https://jsilve24.github.io/fido/reference/ppc.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of Posterior Predictive Check of fit model — ppc.pibblefit","title":"Visualization of Posterior Predictive Check of fit model — ppc.pibblefit","text":"Visualization Posterior Predictive Check fit model","code":""},{"path":"https://jsilve24.github.io/fido/reference/ppc.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of Posterior Predictive Check of fit model — ppc.pibblefit","text":"","code":"# S3 method for pibblefit ppc(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/ppc.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of Posterior Predictive Check of fit model — ppc.pibblefit","text":"m object class pibblefit ... options passed ppc (see details)","code":""},{"path":"https://jsilve24.github.io/fido/reference/ppc.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of Posterior Predictive Check of fit model — ppc.pibblefit","text":"ggplot object","code":""},{"path":"https://jsilve24.github.io/fido/reference/ppc.pibblefit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualization of Posterior Predictive Check of fit model — ppc.pibblefit","text":"ppc.pibblefit accepts following additional arguments: \"type\" type plot (options \"lines\",  \"points\", \"bounds\") \"iter\" number samples posterior predictive distribution plot   (currently must <= m$iter) type==\"lines\" default 50, type==\"ribbon\"   default use available iterations. \"from_scratch\" predictions Y come fitted Eta    predictions Eta posterior Lambda? (default: false)","code":""},{"path":"https://jsilve24.github.io/fido/reference/ppc.pibblefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualization of Posterior Predictive Check of fit model — ppc.pibblefit","text":"","code":"sim <- pibble_sim() fit <- pibble(sim$Y, sim$X) ppc(fit)"},{"path":"https://jsilve24.github.io/fido/reference/ppc_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method to Plot Posterior Predictive Summaries — ppc_summary.pibblefit","title":"Generic Method to Plot Posterior Predictive Summaries — ppc_summary.pibblefit","text":"Generic Method Plot Posterior Predictive Summaries","code":""},{"path":"https://jsilve24.github.io/fido/reference/ppc_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Method to Plot Posterior Predictive Summaries — ppc_summary.pibblefit","text":"","code":"# S3 method for pibblefit ppc_summary(m, from_scratch = FALSE, ...)  ppc_summary(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/ppc_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method to Plot Posterior Predictive Summaries — ppc_summary.pibblefit","text":"m model object from_scratch predictions Y come fitted Eta  predictions Eta posterior Lambda? (default: false) ... arguments pass","code":""},{"path":"https://jsilve24.github.io/fido/reference/ppc_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Method to Plot Posterior Predictive Summaries — ppc_summary.pibblefit","text":"vector","code":""},{"path":"https://jsilve24.github.io/fido/reference/predict.bassetfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict using basset — predict.bassetfit","title":"Predict using basset — predict.bassetfit","text":"Predict using basset","code":""},{"path":"https://jsilve24.github.io/fido/reference/predict.bassetfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict using basset — predict.bassetfit","text":"","code":"# S3 method for bassetfit predict(   object,   newdata = NULL,   response = \"Lambda\",   size = NULL,   use_names = TRUE,   summary = FALSE,   iter = NULL,   from_scratch = FALSE,   ... )"},{"path":"https://jsilve24.github.io/fido/reference/predict.bassetfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict using basset — predict.bassetfit","text":"object object class pibblefit newdata optional matrix evaluate prediction. response Options = \"Lambda\":Mean regression, \"Eta\", \"Y\": counts size number counts per sample response=\"Y\" (vector matrix),  default newdata=NULL response=\"Y\" use colsums m$Y. Otherwise uses median colsums object$Y default. passed matrix dimensions ncol(newdata) x iter. use_names TRUE apply names output summary TRUE, posterior summary predictions returned rather samples iter number iterations return NULL uses object$iter from_scratch predictions Y come fitted Eta  predictions Eta posterior Lambda? (default: false) ... arguments passed summarise_posterior","code":""},{"path":"https://jsilve24.github.io/fido/reference/predict.bassetfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict using basset — predict.bassetfit","text":"(summary==FALSE) array D x N x iter; (summary==TRUE)  tibble calculated posterior summaries","code":""},{"path":"https://jsilve24.github.io/fido/reference/predict.bassetfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict using basset — predict.bassetfit","text":"currently implemented pibblefit objects coord_system \"default\" \"alr\", \"ilr\".","code":""},{"path":"https://jsilve24.github.io/fido/reference/predict.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict response from new data — predict.pibblefit","title":"Predict response from new data — predict.pibblefit","text":"Predict response new data","code":""},{"path":"https://jsilve24.github.io/fido/reference/predict.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict response from new data — predict.pibblefit","text":"","code":"# S3 method for pibblefit predict(   object,   newdata = NULL,   response = \"LambdaX\",   size = NULL,   use_names = TRUE,   summary = FALSE,   iter = NULL,   from_scratch = FALSE,   ... )"},{"path":"https://jsilve24.github.io/fido/reference/predict.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict response from new data — predict.pibblefit","text":"object object class pibblefit newdata optional matrix evaluate predictions. NULL (default), original data model used. response Options = \"LambdaX\":Mean regression, \"Eta\", \"Y\": counts size number counts per sample response=\"Y\" (vector matrix),  default newdata=NULL response=\"Y\" use colsums m$Y. Otherwise uses median colsums m$Y default. passed matrix dimensions ncol(newdata) x iter. use_names TRUE apply names output summary TRUE, posterior summary predictions returned rather samples iter number iterations return NULL uses object$iter from_scratch predictions Y come fitted Eta  predictions Eta posterior Lambda? (default: false) ... arguments passed summarise_posterior","code":""},{"path":"https://jsilve24.github.io/fido/reference/predict.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict response from new data — predict.pibblefit","text":"(summary==FALSE) array D x N x iter; (summary==TRUE)  tibble calculated posterior summaries","code":""},{"path":"https://jsilve24.github.io/fido/reference/predict.pibblefit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict response from new data — predict.pibblefit","text":"currently implemented pibblefit objects coord_system \"default\" \"alr\", \"ilr\".","code":""},{"path":"https://jsilve24.github.io/fido/reference/predict.pibblefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict response from new data — predict.pibblefit","text":"","code":"sim <- pibble_sim() fit <- pibble(sim$Y, sim$X) predict(fit)[,,1:2] # just show 2 samples #> , , 1 #>  #>                     s1         s2         s3          s4          s5         s6 #> log(c1/c10)  0.6863508  0.9219946  1.1473958  1.73329703  1.82454664  1.3992294 #> log(c2/c10) -1.6295976 -1.4148640 -1.2094641 -0.67555370 -0.59240125 -0.9799774 #> log(c3/c10)  1.3595185  0.7966756  0.2582972 -1.14114704 -1.35909975 -0.3432154 #> log(c4/c10) -1.1939518 -1.3017092 -1.4047828 -1.67270915 -1.71443663 -1.5199436 #> log(c5/c10) -4.6737184 -4.3095702 -3.9612500 -3.05583713 -2.91482602 -3.5720831 #> log(c6/c10) -7.0836708 -6.2227212 -5.3991936 -3.25854127 -2.92515108 -4.4790930 #> log(c7/c10)  1.0213983  0.8170428  0.6215698  0.11346333  0.03432964  0.4031742 #> log(c8/c10)  2.6929886  2.3794906  2.0796191  1.30014233  1.17874479  1.7445824 #> log(c9/c10) -2.2387673 -1.7504600 -1.2833774 -0.06925722  0.11983269 -0.7615212 #>                     s7         s8         s9         s10         s11        s12 #> log(c1/c10)  1.4698227  3.2304568  0.8054008  2.36617646  3.75358246  2.1903308 #> log(c2/c10) -0.9156482  0.6887534 -1.5211116 -0.09883376  1.16545871 -0.2590755 #> log(c3/c10) -0.5118299 -4.7171624  1.0751636 -2.65280037 -5.96666524 -2.2327872 #> log(c4/c10) -1.5522251 -2.3573444 -1.2483921 -1.96211818 -2.59656419 -1.8817058 #> log(c5/c10) -3.4629929 -0.7422257 -4.4897464 -2.07782722  0.06617803 -2.3495674 #> log(c6/c10) -4.2211728  2.2114913 -6.6487088 -0.94624890  4.12278659 -1.5887197 #> log(c7/c10)  0.3419541 -1.1849068  0.9181555 -0.43538376 -1.63857303 -0.2828865 #> log(c8/c10)  1.6506658 -0.6916634  2.5346057  0.45816615 -1.38762428  0.6921094 #> log(c9/c10) -0.6152358  3.0331974 -1.9920686  1.24221254  4.11723251  0.8778204 #>                     s13         s14        s15        s16        s17        s18 #> log(c1/c10)  2.69217837  2.67001913  0.6794494  3.4412223  2.2937238  1.3981991 #> log(c2/c10)  0.19823989  0.17804698 -1.6358866  0.8808163 -0.1648572 -0.9809162 #> log(c3/c10) -3.43146666 -3.37853858  1.3760027 -5.2205827 -2.4797448 -0.3407545 #> log(c4/c10) -2.11119539 -2.10106220 -1.1907958 -2.4537252 -1.9289864 -1.5194724 #> log(c5/c10) -1.57404548 -1.60828890 -4.6843834 -0.4165227 -2.1897907 -3.5736753 #> log(c6/c10)  0.24483377  0.16387263 -7.1088858  2.9815454 -1.2109624 -4.4828573 #> log(c7/c10) -0.71809985 -0.69888286  1.0273834 -1.3676873 -0.3725512  0.4040677 #> log(c8/c10)  0.02445662  0.05393704  2.7021702 -0.9720636  0.5545564  1.7459532 #> log(c9/c10)  1.91776245  1.87184348 -2.2530686  3.4699513  1.0920742 -0.7636562 #>                      s19         s20        s21        s22        s23 #> log(c1/c10)  1.253141583  1.80295934  0.6768125  0.7952767  2.8858584 #> log(c2/c10) -1.113101833 -0.61207297 -1.6382895 -1.5303374  0.3747335 #> log(c3/c10)  0.005720035 -1.30753777  1.3823010  1.0993453 -3.8940778 #> log(c4/c10) -1.453139168 -1.70456498 -1.1895900 -1.2437624 -2.1997632 #> log(c5/c10) -3.797837524 -2.94818561 -4.6884583 -4.5053915 -1.2747452 #> log(c6/c10) -5.012840292 -3.00402259 -7.1185199 -6.6856983  0.9524645 #> log(c7/c10)  0.529864787  0.05305062  1.0296701  0.9269354 -0.8860635 #> log(c8/c10)  1.938936111  1.20746431  2.7056783  2.5480747 -0.2332133 #> log(c9/c10) -1.064248225  0.07509890 -2.2585328 -2.0130481  2.3191115 #>                     s24        s25        s26         s27         s28 #> log(c1/c10) -0.03353579  1.0111212  2.0297497  1.90220941  1.80876670 #> log(c2/c10) -2.28560398 -1.3336462 -0.4054072 -0.52163001 -0.60678093 #> log(c3/c10)  3.07899127  0.5837937 -1.8492340 -1.54459981 -1.32140884 #> log(c4/c10) -0.86475529 -1.3424658 -1.8082738 -1.74995098 -1.70722063 #> log(c5/c10) -5.78618344 -4.1718398 -2.5977188 -2.79481114 -2.93921130 #> log(c6/c10) -9.71385303 -5.8970876 -2.1754199 -2.64140191 -2.98280477 #> log(c7/c10)  1.64569996  0.7397503 -0.1436270 -0.03302123  0.04801435 #> log(c8/c10)  3.65071823  2.2609175  0.9057448  1.07542307  1.19973826 #> log(c9/c10) -3.73053564 -1.5657694  0.5450600  0.28076755  0.08713307 #>                     s29        s30 #> log(c1/c10)  1.91983395  1.6292348 #> log(c2/c10) -0.50556940 -0.7703818 #> log(c3/c10) -1.58669662 -0.8925910 #> log(c4/c10) -1.75801050 -1.6251226 #> log(c5/c10) -2.76757533 -3.2166480 #> log(c6/c10) -2.57700875 -3.6387436 #> log(c7/c10) -0.04830563  0.2037084 #> log(c8/c10)  1.05197555  1.4385856 #> log(c9/c10)  0.31728961 -0.2848977 #>  #> , , 2 #>  #>                     s1         s2          s3         s4         s5         s6 #> log(c1/c10)  0.2554892  0.6278036  0.98393505  1.9096522  2.0538256  1.3818291 #> log(c2/c10) -2.1370698 -1.8312776 -1.53877705 -0.7784599 -0.6600464 -1.2119756 #> log(c3/c10)  2.4393810  1.7523679  1.09521648 -0.6129628 -0.8789986  0.3610025 #> log(c4/c10)  0.8846957  0.4577851  0.04943046 -1.0120340 -1.1773489 -0.4068109 #> log(c5/c10) -3.5373904 -3.2557568 -2.98636478 -2.2861153 -2.1770568 -2.6853818 #> log(c6/c10) -5.9087214 -5.2678389 -4.65481308 -3.0613325 -2.8131601 -3.9698992 #> log(c7/c10)  2.1163553  1.7799539  1.45817460  0.6217512  0.4914847  1.0986610 #> log(c8/c10)  1.6198074  1.4238384  1.23638750  0.7491332  0.6732471  1.0269546 #> log(c9/c10) -0.5649927 -0.3421060 -0.12890733  0.4252748  0.5115845  0.1092927 #>                     s7         s8         s9         s10        s11         s12 #> log(c1/c10)  1.4933658  4.2751475  0.4435868  2.90959448  5.1016801  2.63176036 #> log(c2/c10) -1.1203675  1.1643868 -1.9825800  0.04282032  1.8432409 -0.18537254 #> log(c3/c10)  0.1551896 -4.9778922  2.0922938 -2.45810594 -6.5030512 -1.94543261 #> log(c4/c10) -0.5347032 -3.7244058  0.6690154 -2.15860788 -4.6721412 -1.84003213 #> log(c5/c10) -2.6010110 -0.4967600 -3.3951058 -1.52971895  0.1284623 -1.73988380 #> log(c6/c10) -3.7779059  1.0105062 -5.5849399 -1.34008468  2.4332557 -1.81833366 #> log(c7/c10)  0.9978831 -1.5155707  1.9464013 -0.28173759 -2.2623767 -0.03070308 #> log(c8/c10)  0.9682470 -0.4959529  1.5208015  0.22281038 -0.9310010  0.36904928 #> log(c9/c10)  0.1760642  1.8413827 -0.4523877  1.02389199  2.3361878  0.85756612 #>                     s13         s14        s15        s16         s17 #> log(c1/c10)  3.42467377  3.38966242  0.2445850  4.6081546  2.79512013 #> log(c2/c10)  0.46586918  0.43711340 -2.1460257  1.4378947 -0.05120064 #> log(c3/c10) -3.40855583 -3.34395115  2.4595019 -5.5923734 -2.24687218 #> log(c4/c10) -2.74921846 -2.70907304  0.8971989 -4.1062450 -2.02734700 #> log(c5/c10) -1.14009237 -1.16657636 -3.5456387 -0.2448602 -1.61631193 #> log(c6/c10) -0.45345441 -0.51372109 -5.9274911  1.5837269 -1.53713478 #> log(c7/c10) -0.74713283 -0.71549865  2.1262076 -1.8164562 -0.17830533 #> log(c8/c10) -0.04830328 -0.02987494  1.6255468 -0.6712322  0.28306433 #> log(c9/c10)  1.33224509  1.31128549 -0.5715205  2.0407379  0.95536172 #>                    s18         s19        s20        s21        s22         s23 #> log(c1/c10)  1.3802013  1.15101211  2.0197179  0.2404188  0.4275909  3.73068604 #> log(c2/c10) -1.2133126 -1.40155203 -0.6880600 -2.1494475 -1.9957179  0.71720553 #> log(c3/c10)  0.3640064  0.78691759 -0.8160614  2.4671896  2.1218104 -3.97322487 #> log(c4/c10) -0.4049443 -0.14214680 -1.1382397  0.9019760  0.6873570 -3.10010440 #> log(c5/c10) -2.6866132 -2.85998100 -2.2028572 -3.5487902 -3.4072058 -0.90861245 #> log(c6/c10) -3.9727013 -4.36721545 -2.8718712 -5.9346627 -5.6124746  0.07329895 #> log(c7/c10)  1.1001318  1.30721363  0.5223024  2.1299720  1.9608544 -1.02362746 #> log(c8/c10)  1.0278115  1.14844594  0.6911998  1.6277397  1.5292211 -0.20937383 #> log(c9/c10)  0.1083181 -0.02888636  0.4911658 -0.5740146 -0.4619637  1.51543986 #>                    s24        s25        s26        s27        s28        s29 #> log(c1/c10) -0.8819234  0.7686226  2.3780441  2.1765318  2.0288934  2.2043784 #> log(c2/c10) -3.0712582 -1.7156191 -0.3937568 -0.5592643 -0.6805238 -0.5363931 #> log(c3/c10)  4.5381912  1.4925217 -1.4772627 -1.1054224 -0.8329926 -1.1568063 #> log(c4/c10)  2.1888986  0.2963163 -1.5491108 -1.3180489 -1.1487607 -1.3499789 #> log(c5/c10) -4.3977748 -3.1492357 -1.9318050 -2.0842369 -2.1959164 -2.0631726 #> log(c6/c10) -7.8666033 -5.0254405 -2.2550675 -2.6019400 -2.8560769 -2.5540063 #> log(c7/c10)  3.1440542  1.6527182  0.1985400  0.3806145  0.5140119  0.3554540 #> log(c8/c10)  2.2184882  1.3497179  0.5025937  0.6086603  0.6863702  0.5940031 #> log(c9/c10) -1.2459067 -0.2578045  0.7056784  0.5850428  0.4966588  0.6017132 #>                    s30 #> log(c1/c10)  1.7452351 #> log(c2/c10) -0.9135002 #> log(c3/c10) -0.3095722 #> log(c4/c10) -0.8235067 #> log(c5/c10) -2.4104870 #> log(c6/c10) -3.3443514 #> log(c7/c10)  0.7703088 #> log(c8/c10)  0.8356747 #> log(c9/c10)  0.3268463 #>"},{"path":"https://jsilve24.github.io/fido/reference/print.orthusfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print dimensions and coordinate system information for orthusfit object. — print.orthusfit","title":"Print dimensions and coordinate system information for orthusfit object. — print.orthusfit","text":"Print dimensions coordinate system information orthusfit object.","code":""},{"path":"https://jsilve24.github.io/fido/reference/print.orthusfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print dimensions and coordinate system information for orthusfit object. — print.orthusfit","text":"","code":"# S3 method for orthusfit print(x, summary = FALSE, ...)"},{"path":"https://jsilve24.github.io/fido/reference/print.orthusfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print dimensions and coordinate system information for orthusfit object. — print.orthusfit","text":"x object class orthusfit summary true also calculates prints summary ... arguments pass summary function","code":""},{"path":"https://jsilve24.github.io/fido/reference/print.orthusfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print dimensions and coordinate system information for orthusfit object. — print.orthusfit","text":"direct return, prints summary","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/print.orthusfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print dimensions and coordinate system information for orthusfit object. — print.orthusfit","text":"","code":"sim <- orthus_sim() fit <- orthus(sim$Y, sim$Z, sim$X) print(fit) #> orthusfit Object:  #>   Number of Samples:\t\t 30  #>   Number of Categories:\t\t 10  #>   Number of Zdimensions:\t 10  #>   Number of Covariates:\t\t 2  #>   Number of Posterior Samples:\t 2000  #>   Contains Samples of Parameters:Eta  Lambda  Sigma #>   Coordinate System:\t\t alr, reference category: 10 [c10]"},{"path":"https://jsilve24.github.io/fido/reference/print.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print dimensions and coordinate system information for pibblefit object. — print.pibblefit","title":"Print dimensions and coordinate system information for pibblefit object. — print.pibblefit","text":"Print dimensions coordinate system information pibblefit object.","code":""},{"path":"https://jsilve24.github.io/fido/reference/print.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print dimensions and coordinate system information for pibblefit object. — print.pibblefit","text":"","code":"# S3 method for pibblefit print(x, summary = FALSE, ...)"},{"path":"https://jsilve24.github.io/fido/reference/print.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print dimensions and coordinate system information for pibblefit object. — print.pibblefit","text":"x object class pibblefit summary true also calculates prints summary ... arguments pass summary function","code":""},{"path":"https://jsilve24.github.io/fido/reference/print.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print dimensions and coordinate system information for pibblefit object. — print.pibblefit","text":"direct return, prints summary","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/print.pibblefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print dimensions and coordinate system information for pibblefit object. — print.pibblefit","text":"","code":"sim <- pibble_sim() fit <- pibble(sim$Y, sim$X) print(fit) #> pibblefit Object:  #>   Number of Samples:\t\t 30  #>   Number of Categories:\t\t 10  #>   Number of Covariates:\t\t 2  #>   Number of Posterior Samples:\t 2000  #>   Contains Samples of Parameters:Eta  Lambda  Sigma #>   Coordinate System:\t\t alr, reference category: 10 [c10]  #>   Log Marginal Likelihood:\t -1905.463"},{"path":"https://jsilve24.github.io/fido/reference/r2.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method to Calculate R2 for Fitted Model — r2","title":"Generic Method to Calculate R2 for Fitted Model — r2","text":"Generic Method Calculate R2 Fitted Model","code":""},{"path":"https://jsilve24.github.io/fido/reference/r2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Method to Calculate R2 for Fitted Model — r2","text":"","code":"r2(m, ...)  # S3 method for pibblefit r2(m, covariates = NULL, ...)  # S3 method for bassetfit r2(m, covariates = NULL, components = NULL, ...)"},{"path":"https://jsilve24.github.io/fido/reference/r2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method to Calculate R2 for Fitted Model — r2","text":"m model object ... arguments pass covariates vector indices covariates include calculation R2 (default:NULL means include covariates default). non-null, covariates specified set zero prediction. components vector indices components GP model include calculation R2, .e. elements list Theta/Gamma used calculating R2 (default:NULL means include components default). non-null, components specified removed prediction.","code":""},{"path":"https://jsilve24.github.io/fido/reference/r2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Method to Calculate R2 for Fitted Model — r2","text":"vector","code":""},{"path":"https://jsilve24.github.io/fido/reference/r2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic Method to Calculate R2 for Fitted Model — r2","text":"Calculates Posterior Linear Model R2 : $$1-\\frac{SS_{res}}{SS_{tot}}$$   \\(SS\\) defined terms trace variances Method calculating R2 multivariate version Bayesian R2 proposed   Gelman, Goodrich, Gabry, Vehtari, 2019 Calculates Posterior Basset Model R2 :   $$1-\\frac{SS_{res}}{SS_tot}$$ Method calculating R2 multivariate version Bayesian R2 proposed   Gelman, Goodrich, Gabry, Vehtari, 2019","code":""},{"path":"https://jsilve24.github.io/fido/reference/random_pibble_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide random initialization for pibble model — random_pibble_init","title":"Provide random initialization for pibble model — random_pibble_init","text":"Randomly initializes based ALR transform counts plus random pseudocounts uniformily distributed  0 1.","code":""},{"path":"https://jsilve24.github.io/fido/reference/random_pibble_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide random initialization for pibble model — random_pibble_init","text":"","code":"random_pibble_init(Y)"},{"path":"https://jsilve24.github.io/fido/reference/random_pibble_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide random initialization for pibble model — random_pibble_init","text":"Y matrix (D x N) counts","code":""},{"path":"https://jsilve24.github.io/fido/reference/random_pibble_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide random initialization for pibble model — random_pibble_init","text":"(D-1) x N matrix","code":""},{"path":"https://jsilve24.github.io/fido/reference/random_pibble_init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide random initialization for pibble model — random_pibble_init","text":"Notation: N number samples D number multinomial categories","code":""},{"path":"https://jsilve24.github.io/fido/reference/random_pibble_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide random initialization for pibble model — random_pibble_init","text":"","code":"Y <- matrix(sample(1:100, 100), 10, 10) random_pibble_init(Y) #>              [,1]       [,2]       [,3]        [,4]      [,5]       [,6] #>  [1,]  0.23660466  1.4598363  0.9658481  0.18864204 1.2016553  0.4090269 #>  [2,] -1.19376204  0.7459717 -0.8392955  0.27854944 1.3081819  1.5798430 #>  [3,]  0.19207150 -0.5465259  0.2568837  0.18131340 2.0076284  1.2946190 #>  [4,] -2.18542495  1.6698889  0.5886388 -0.68991605 0.8630323  1.5565141 #>  [5,] -0.26741449  0.9773509  0.7888081  0.62469770 1.1535058 -0.2702583 #>  [6,]  0.32496192  0.7853063  0.2360171  0.64754510 2.1580763  0.9309895 #>  [7,] -0.08265820  1.9155669  0.2074024  0.06431048 1.4820427 -1.4216753 #>  [8,]  0.01016646  1.7677720  0.8654985  0.03223031 2.1358697  1.0339394 #>  [9,]  0.08949171  1.2311659 -2.3995358  0.65230881 0.3264818  1.1043988 #>             [,7]       [,8]       [,9]       [,10] #>  [1,]  0.4111793  0.2060477  0.9374666 -0.07689473 #>  [2,]  0.3751373  0.2438592  0.7169684  0.39788338 #>  [3,] -0.9219538 -1.4136812  0.8927650 -1.60776520 #>  [4,]  0.2549624 -3.4222411  0.8726415  0.47129714 #>  [5,]  0.7444977 -2.6268533  1.1067329 -1.18005676 #>  [6,] -1.3447426 -1.2379741  0.1702146 -0.47998559 #>  [7,] -2.8299551  0.3144693  1.0313656  0.18794529 #>  [8,]  0.6958352 -0.3683971 -0.6394268 -0.65754528 #>  [9,]  0.5662617  0.1261886  0.7910319 -0.84975115"},{"path":"https://jsilve24.github.io/fido/reference/refit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for fitting model from passed model fit object — refit","title":"Generic method for fitting model from passed model fit object — refit","text":"Generic method fitting model passed model fit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/refit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for fitting model from passed model fit object — refit","text":"","code":"refit(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/refit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for fitting model from passed model fit object — refit","text":"m object ... arguments passed control fitting","code":""},{"path":"https://jsilve24.github.io/fido/reference/refit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for fitting model from passed model fit object — refit","text":"object class m","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for ensuring object contains required elements — req","title":"Generic method for ensuring object contains required elements — req","text":"Intended called internally package","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for ensuring object contains required elements — req","text":"","code":"req(m, r)"},{"path":"https://jsilve24.github.io/fido/reference/req.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for ensuring object contains required elements — req","text":"m object r vector elements test ","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for ensuring object contains required elements — req","text":"throws error required element present","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.maltipoofit.html","id":null,"dir":"Reference","previous_headings":"","what":"require elements to be non-null in pibblefit or throw error — req.maltipoofit","title":"require elements to be non-null in pibblefit or throw error — req.maltipoofit","text":"require elements non-null pibblefit throw error","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.maltipoofit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"require elements to be non-null in pibblefit or throw error — req.maltipoofit","text":"","code":"# S3 method for maltipoofit req(m, r)"},{"path":"https://jsilve24.github.io/fido/reference/req.maltipoofit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"require elements to be non-null in pibblefit or throw error — req.maltipoofit","text":"m object r vector elements test ","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.maltipoofit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"require elements to be non-null in pibblefit or throw error — req.maltipoofit","text":"Throws error null","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.orthusfit.html","id":null,"dir":"Reference","previous_headings":"","what":"require elements to be non-null in orthusfit or throw error — req.orthusfit","title":"require elements to be non-null in orthusfit or throw error — req.orthusfit","text":"require elements non-null orthusfit throw error","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.orthusfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"require elements to be non-null in orthusfit or throw error — req.orthusfit","text":"","code":"# S3 method for orthusfit req(m, r)"},{"path":"https://jsilve24.github.io/fido/reference/req.orthusfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"require elements to be non-null in orthusfit or throw error — req.orthusfit","text":"m object r vector elements test ","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.orthusfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"require elements to be non-null in orthusfit or throw error — req.orthusfit","text":"None, throws error NULL","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"require elements to be non-null in pibblefit or throw error — req.pibblefit","title":"require elements to be non-null in pibblefit or throw error — req.pibblefit","text":"require elements non-null pibblefit throw error","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"require elements to be non-null in pibblefit or throw error — req.pibblefit","text":"","code":"# S3 method for pibblefit req(m, r)"},{"path":"https://jsilve24.github.io/fido/reference/req.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"require elements to be non-null in pibblefit or throw error — req.pibblefit","text":"m object r vector elements test ","code":""},{"path":"https://jsilve24.github.io/fido/reference/req.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"require elements to be non-null in pibblefit or throw error — req.pibblefit","text":"Nothing, throws error NULL","code":""},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for sampling from prior distribution of object — sample_prior","title":"Generic method for sampling from prior distribution of object — sample_prior","text":"Generic method sampling prior distribution object","code":""},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for sampling from prior distribution of object — sample_prior","text":"","code":"sample_prior(m, n_samples = 2000L, ...)"},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for sampling from prior distribution of object — sample_prior","text":"m object n_samples number samples produce ... arguments passed","code":""},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for sampling from prior distribution of object — sample_prior","text":"object class","code":""},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from the prior distribution of pibblefit object — sample_prior.pibblefit","title":"Sample from the prior distribution of pibblefit object — sample_prior.pibblefit","text":"Note can used sample prior predict can called get counts LambdaX (predict.pibblefit)","code":""},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from the prior distribution of pibblefit object — sample_prior.pibblefit","text":"","code":"# S3 method for pibblefit sample_prior(   m,   n_samples = 2000L,   pars = c(\"Eta\", \"Lambda\", \"Sigma\"),   use_names = TRUE,   ... )"},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from the prior distribution of pibblefit object — sample_prior.pibblefit","text":"m object class pibblefit n_samples number samples produce pars parameters sample use_names names used available ... currently ignored","code":""},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from the prior distribution of pibblefit object — sample_prior.pibblefit","text":"pibblefit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.pibblefit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample from the prior distribution of pibblefit object — sample_prior.pibblefit","text":"greatly speed future needed sampling directly cholesky form inverse wishart (currently implemented  header library - see MatDist.h).","code":""},{"path":"https://jsilve24.github.io/fido/reference/sample_prior.pibblefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from the prior distribution of pibblefit object — sample_prior.pibblefit","text":"","code":"# Sample prior of already fitted  pibblefit object sim <- pibble_sim() attach(sim) #> The following object is masked from package:fido: #>  #>     Y fit <- pibble(Y, X) head(sample_prior(fit)) #> $D #> [1] 10 #>  #> $N #> [1] 30 #>  #> $Q #> [1] 2 #>  #> $iter #> [1] 2000 #>  #> $coord_system #> [1] \"alr\" #>  #> $alr_base #> [1] 10 #>   # Sample prior as part of model fitting m <- pibblefit(N=as.integer(sim$N), D=as.integer(sim$D), Q=as.integer(sim$Q),                  iter=2000L, upsilon=upsilon,                  Xi=Xi, Gamma=Gamma, Theta=Theta, X=X,                  coord_system=\"alr\", alr_base=D) m <- sample_prior(m) plot(m) # plot prior distribution (defaults to parameter Lambda)  #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://jsilve24.github.io/fido/reference/store_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Holds information on coordinates system to later be reapplied — store_coord","title":"Holds information on coordinates system to later be reapplied — store_coord","text":"store_coord stores coordinate information pibblefit object can reapplied function reapply_coord. coordinate systems useful computation makes simple keep  returned object computations coordinate system input.  (Likely useful inside package)","code":""},{"path":"https://jsilve24.github.io/fido/reference/store_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Holds information on coordinates system to later be reapplied — store_coord","text":"","code":"store_coord(m)  reapply_coord(m, l)"},{"path":"https://jsilve24.github.io/fido/reference/store_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Holds information on coordinates system to later be reapplied — store_coord","text":"m object class pibblefit l object returned function store_coord","code":""},{"path":"https://jsilve24.github.io/fido/reference/store_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Holds information on coordinates system to later be reapplied — store_coord","text":"store_coord list important information identify c  coordinate system pibblefit object. reapply_coord pibblefit object  coordinate system previously stored.","code":""},{"path":"https://jsilve24.github.io/fido/reference/summarise_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortcut for summarize variable with quantiles and mean — summarise_posterior","title":"Shortcut for summarize variable with quantiles and mean — summarise_posterior","text":"Shortcut summarize variable quantiles mean","code":""},{"path":"https://jsilve24.github.io/fido/reference/summarise_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortcut for summarize variable with quantiles and mean — summarise_posterior","text":"","code":"summarise_posterior(data, var, ...)"},{"path":"https://jsilve24.github.io/fido/reference/summarise_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortcut for summarize variable with quantiles and mean — summarise_posterior","text":"data tidy data frame var variable name (unquoted) summarised ... expressions pass summarise","code":""},{"path":"https://jsilve24.github.io/fido/reference/summarise_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortcut for summarize variable with quantiles and mean — summarise_posterior","text":"data.frame","code":""},{"path":"https://jsilve24.github.io/fido/reference/summarise_posterior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shortcut for summarize variable with quantiles and mean — summarise_posterior","text":"Notation: pX refers X% quantile","code":""},{"path":"https://jsilve24.github.io/fido/reference/summarise_posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortcut for summarize variable with quantiles and mean — summarise_posterior","text":"","code":"d <- data.frame(\"a\"=sample(1:10, 50, TRUE),                 \"b\"=rnorm(50))  # Summarize posterior for b over grouping of a and also calcuate # minmum of b (in addition to normal statistics returned) d <- dplyr::group_by(d, a) summarise_posterior(d, b, mean.b = mean(b), min=min(b)) #> # A tibble: 10 × 9 #>        a    p2.5    p25      p50   mean    p75 p97.5 mean.b     min #>    <int>   <dbl>  <dbl>    <dbl>  <dbl>  <dbl> <dbl>  <dbl>   <dbl> #>  1     1 -1.74   -1.39  -0.997   -0.721 -0.190 0.537 -0.721 -1.78   #>  2     2 -0.529   0.351  1.33     0.850  1.59  1.82   0.850 -0.627  #>  3     3  0.0779  0.198  0.442    0.581  0.825 1.32   0.581  0.0645 #>  4     4 -0.570  -0.232  0.145    0.145  0.521 0.860  0.145 -0.608  #>  5     5 -0.736   0.213  0.483    0.526  0.804 1.85   0.526 -0.845  #>  6     6 -1.72   -1.14  -0.578   -0.564 -0.301 0.864 -0.564 -1.79   #>  7     7 -1.02   -0.778 -0.00534 -0.111  0.528 0.696 -0.111 -1.03   #>  8     8  0.243   0.680  1.17     1.27   1.81  2.38   1.27   0.195  #>  9     9 -1.56   -0.514  0.0854  -0.114  0.302 1.14  -0.114 -1.68   #> 10    10 -0.663  -0.424  0.433    0.383  0.719 1.94   0.383 -0.691"},{"path":"https://jsilve24.github.io/fido/reference/summary.orthusfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise orthusfit object and print posterior quantiles — summary.orthusfit","title":"Summarise orthusfit object and print posterior quantiles — summary.orthusfit","text":"Default calculates median, mean, 50% 95% credible interval","code":""},{"path":"https://jsilve24.github.io/fido/reference/summary.orthusfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise orthusfit object and print posterior quantiles — summary.orthusfit","text":"","code":"# S3 method for orthusfit summary(   object,   pars = NULL,   use_names = TRUE,   as_factor = FALSE,   gather_prob = FALSE,   ... )"},{"path":"https://jsilve24.github.io/fido/reference/summary.orthusfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise orthusfit object and print posterior quantiles — summary.orthusfit","text":"object object class orthusfit pars character vector (default: c(\"Eta\", \"Lambda\", \"Sigma\")) use_names summary replace dimension indices orthusfit  names names Y X named call orthus as_factor use_names as_factor returns names factors  (useful maintaining orderings plotting) gather_prob TRUE prints quantiles long format rather  wide (useful plotting functions) ... expressions pass summarise (using name 'val' unquoted  probably want)","code":""},{"path":"https://jsilve24.github.io/fido/reference/summary.orthusfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise orthusfit object and print posterior quantiles — summary.orthusfit","text":"list","code":""},{"path":"https://jsilve24.github.io/fido/reference/summary.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise pibblefit object and print posterior quantiles — summary.pibblefit","title":"Summarise pibblefit object and print posterior quantiles — summary.pibblefit","text":"Default calculates median, mean, 50% 95% credible interval","code":""},{"path":"https://jsilve24.github.io/fido/reference/summary.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise pibblefit object and print posterior quantiles — summary.pibblefit","text":"","code":"# S3 method for pibblefit summary(   object,   pars = NULL,   use_names = TRUE,   as_factor = FALSE,   gather_prob = FALSE,   ... )"},{"path":"https://jsilve24.github.io/fido/reference/summary.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise pibblefit object and print posterior quantiles — summary.pibblefit","text":"object object class pibblefit pars character vector (default: c(\"Eta\", \"Lambda\", \"Sigma\")) use_names summary replace dimension indices pibblefit  names names Y X named call pibble as_factor use_names as_factor returns names factors  (useful maintaining orderings plotting) gather_prob TRUE prints quantiles long format rather  wide (useful plotting functions) ... expressions pass summarise (using name 'val' unquoted  probably want)","code":""},{"path":"https://jsilve24.github.io/fido/reference/summary.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise pibblefit object and print posterior quantiles — summary.pibblefit","text":"list","code":""},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncollapse output from optimPibbleCollapsed to full pibble Model — uncollapsePibble","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model — uncollapsePibble","text":"See details model. likely called following optimPibbleCollapsed. Notation: N number samples, D number multinomial categories, Q number covariates, iter number samples eta (e.g., parameter n_samples function optimPibbleCollapsed)","code":""},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model — uncollapsePibble","text":"","code":"uncollapsePibble(   eta,   X,   Theta,   Gamma,   Xi,   upsilon,   seed,   ret_mean = FALSE,   ncores = -1L )"},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model — uncollapsePibble","text":"eta array dimension (D-1) x N x iter (e.g., Pars output function optimPibbleCollapsed) X matrix covariates dimension Q x N Theta matrix prior mean dimension (D-1) x Q Gamma covariance matrix dimension Q x Q Xi covariance matrix dimension (D-1) x (D-1) upsilon scalar (must > D) degrees freedom InvWishart prior seed seed use random number generation ret_mean true uses posterior mean Lambda Sigma corresponding sample eta rather sampling posterior Lambda Sigma (useful Laplace approximation used (fails) optimPibbleCollapsed) ncores (default:-1) number cores use, ncores==-1 uses default OpenMP typically use available cores.","code":""},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model — uncollapsePibble","text":"List components Lambda Array dimension (D-1) x Q x iter (posterior samples) Sigma Array dimension (D-1) x (D-1) x iter (posterior samples) number cores used Timer","code":""},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model — uncollapsePibble","text":"Notation: Let Z_j denote J-th row matrix Z. collapsed model given : $$Y_j sim Multinomial(Pi_j)$$ $$Pi_j = Phi^{-1}(Eta_j)$$ $$Eta \\sim T_{D-1, N}(upsilon, Theta*X, K, )$$ = I_N + X * Gamma * X', K = Xi (D-1)x(D-1) covariance matrix, Gamma Q x Q covariance matrix, \\(Phi^{-1}\\) ALRInv_D transform. uncollapsed model (Full pibble model) given : $$Y_j \\sim Multinomial(Pi_j)$$ $$Pi_j = Phi^{-1}(Eta_j)$$ $$Eta \\sim MN_{D-1 x N}(Lambda*X, Sigma, I_N)$$ $$Lambda \\sim MN_{D-1 x Q}(Theta, Sigma, Gamma)$$ $$Sigma \\sim InvWish(upsilon, Xi)$$ function provides means sampling posterior distribution Lambda Sigma given posterior samples Eta collapsed model.","code":""},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model — uncollapsePibble","text":"JD Silverman K Roche, ZC Holmes, LA David, S Mukherjee. Bayesian Multinomial Logistic Normal Models Marginally Latent Matrix-T Processes. 2019, arXiv e-prints, arXiv:1903.11695","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model — uncollapsePibble","text":"","code":"sim <- pibble_sim()  # Fit model for eta fit <- optimPibbleCollapsed(sim$Y, sim$upsilon, sim$Theta%*%sim$X, sim$KInv,                               sim$AInv, random_pibble_init(sim$Y))    # Finally obtain samples from Lambda and Sigma fit2 <- uncollapsePibble(fit$Samples, sim$X, sim$Theta,                                     sim$Gamma, sim$Xi, sim$upsilon,                                     seed=2849)"},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble_sigmaKnown.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncollapse output from optimPibbleCollapsed to full pibble Model when Sigma is known — uncollapsePibble_sigmaKnown","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model when Sigma is known — uncollapsePibble_sigmaKnown","text":"See details model. likely called following optimPibbleCollapsed. Notation: N number samples, D number multinomial categories, Q number covariates, iter number samples eta (e.g., parameter n_samples function optimPibbleCollapsed)","code":""},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble_sigmaKnown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model when Sigma is known — uncollapsePibble_sigmaKnown","text":"","code":"uncollapsePibble_sigmaKnown(   eta,   X,   Theta,   Gamma,   GammaComb,   Xi,   sigma,   upsilon,   seed,   ret_mean = FALSE,   linear = FALSE,   ncores = -1L )"},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble_sigmaKnown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model when Sigma is known — uncollapsePibble_sigmaKnown","text":"eta array dimension (D-1) x N x iter (e.g., Pars output function optimPibbleCollapsed) X matrix covariates dimension Q x N Theta matrix prior mean dimension (D-1) x Q Gamma covariance matrix dimension Q x Q GammaComb summed covariance matrix across additive components dimension Q x Q. Xi covariance matrix dimension (D-1) x (D-1) sigma known covariance matrix dimension (D-1) x (D-1) x iter upsilon scalar (must > D) degrees freedom InvWishart prior seed seed use random number generation ret_mean true uses posterior mean Lambda Sigma corresponding sample eta rather sampling posterior Lambda Sigma (useful Laplace approximation used (fails) optimPibbleCollapsed) linear Boolean. linear parameter? ncores (default:-1) number cores use, ncores==-1 uses default OpenMP typically use available cores.","code":""},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble_sigmaKnown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model when Sigma is known — uncollapsePibble_sigmaKnown","text":"List components Lambda Array dimension (D-1) x Q x iter (posterior samples) Sigma Array dimension (D-1) x (D-1) x iter (posterior samples) number cores used Timer","code":""},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble_sigmaKnown.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model when Sigma is known — uncollapsePibble_sigmaKnown","text":"Notation: Let Z_j denote J-th row matrix Z. collapsed model given : $$Y_j \\sim Multinomial(Pi_j)$$ $$Pi_j = Phi^{-1}(Eta_j)$$ $$Eta \\sim T_{D-1, N}(upsilon, Theta*X, K, )$$ = I_N + X * Gamma * X', K = Xi (D-1)x(D-1) covariance matrix, Gamma Q x Q covariance matrix, \\(Phi^{-1}\\) ALRInv_D transform. uncollapsed model (Full pibble model) given : $$Y_j \\sim Multinomial(Pi_j)$$ $$Pi_j = Phi^{-1}(Eta_j)$$ $$Eta \\sim MN_{D-1 x N}(Lambda*X, Sigma, I_N)$$ $$Lambda \\sim MN_{D-1 x Q}(Theta, Sigma, Gamma)$$ $$Sigma \\sim InvWish(upsilon, Xi)$$ function provides means sampling posterior distribution Lambda Sigma given posterior samples Eta collapsed model.","code":""},{"path":"https://jsilve24.github.io/fido/reference/uncollapsePibble_sigmaKnown.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Uncollapse output from optimPibbleCollapsed to full pibble Model when Sigma is known — uncollapsePibble_sigmaKnown","text":"JD Silverman K Roche, ZC Holmes, LA David, S Mukherjee. Bayesian Multinomial Logistic Normal Models Marginally Latent Matrix-T Processes. 2019, arXiv e-prints, arXiv:1903.11695","code":""},{"path":[]},{"path":"https://jsilve24.github.io/fido/reference/verify.bassetfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple verification of passed bassetfit object — verify.bassetfit","title":"Simple verification of passed bassetfit object — verify.bassetfit","text":"Simple verification passed bassetfit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.bassetfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple verification of passed bassetfit object — verify.bassetfit","text":"","code":"# S3 method for bassetfit verify(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/verify.bassetfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple verification of passed bassetfit object — verify.bassetfit","text":"m object class bassetfit ... used","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.bassetfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple verification of passed bassetfit object — verify.bassetfit","text":"throws error verification tests fail","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for verifying new objects — verify","title":"Generic method for verifying new objects — verify","text":"Intended called internally package object creator","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for verifying new objects — verify","text":"","code":"verify(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/verify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for verifying new objects — verify","text":"m object ... arguments passed verify","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for verifying new objects — verify","text":"throws error verify test fails","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.maltipoofit.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple verification of passed multipoo object — verify.maltipoofit","title":"Simple verification of passed multipoo object — verify.maltipoofit","text":"Simple verification passed multipoo object","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.maltipoofit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple verification of passed multipoo object — verify.maltipoofit","text":"","code":"# S3 method for maltipoofit verify(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/verify.maltipoofit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple verification of passed multipoo object — verify.maltipoofit","text":"m object class multipoo ... used","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.maltipoofit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple verification of passed multipoo object — verify.maltipoofit","text":"throws error verification tests fail","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.orthusfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple verification of passed orthusfit object — verify.orthusfit","title":"Simple verification of passed orthusfit object — verify.orthusfit","text":"Simple verification passed orthusfit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.orthusfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple verification of passed orthusfit object — verify.orthusfit","text":"","code":"# S3 method for orthusfit verify(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/verify.orthusfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple verification of passed orthusfit object — verify.orthusfit","text":"m object class orthusfit ... used","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.orthusfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple verification of passed orthusfit object — verify.orthusfit","text":"throws error verification tests fail","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.pibblefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple verification of passed pibblefit object — verify.pibblefit","title":"Simple verification of passed pibblefit object — verify.pibblefit","text":"Simple verification passed pibblefit object","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.pibblefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple verification of passed pibblefit object — verify.pibblefit","text":"","code":"# S3 method for pibblefit verify(m, ...)"},{"path":"https://jsilve24.github.io/fido/reference/verify.pibblefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple verification of passed pibblefit object — verify.pibblefit","text":"m object class pibblefit ... used","code":""},{"path":"https://jsilve24.github.io/fido/reference/verify.pibblefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple verification of passed pibblefit object — verify.pibblefit","text":"throws error verification tests fail","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-110","dir":"Changelog","previous_headings":"","what":"fido 1.1.0","title":"fido 1.1.0","text":"Updating basset model allow additive Gaussian processes Updating random seed generation","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-104","dir":"Changelog","previous_headings":"","what":"fido 1.0.4","title":"fido 1.0.4","text":"CRAN release: 2023-03-24 changing default optimizer (lbfgs rather adam), adam sensitive random seed adding new r2 methods calculating Bayesian R2 pibble basset models predict.bassetfit now accepts newdata=NULL argument predict training set bug fixes fixing discrepancies base R commands (print, summary, etc).","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-103","dir":"Changelog","previous_headings":"","what":"fido 1.0.3","title":"fido 1.0.3","text":"CRAN release: 2022-08-23 bug fixes Updating documentation newest version R (4.2.1)","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-102","dir":"Changelog","previous_headings":"","what":"fido 1.0.2","title":"fido 1.0.2","text":"CRAN release: 2022-07-06 bug fixes Removing timing test irrelevant can fail certain set-ups.","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-101","dir":"Changelog","previous_headings":"","what":"fido 1.0.1","title":"fido 1.0.1","text":"CRAN release: 2022-05-17 bug fixes Changing phyloseq imports depends, causing issues installing CRAN. Fixing bug configure.ac causing openmp parallelization work machines.","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-100","dir":"Changelog","previous_headings":"","what":"fido 1.0.0","title":"fido 1.0.0","text":"CRAN release: 2022-02-16 changes make final push CRAN! Changes include: Updating description file match CRAN’s standards Removing dependency driver Linking one remote package (MicrobeDS) separate CRAN-like Github repo using “drat” package. match CRAN’s policy use “Remotes”. Precomputing longer running vignettes, cutting R CMD check times half. original vignettes can found vignettes folder “.orig” extension reproducibility.","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-0114","dir":"Changelog","previous_headings":"","what":"fido 0.1.14","title":"fido 0.1.14","text":"changes prepare version 0.2 (CRAN soon), including: Lots cleaning small warnings notes Fixing erorrs base plot function Cleaning manual entries Fixing errors posted Github (to_ilr among others)","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-0113","dir":"Changelog","previous_headings":"","what":"fido 0.1.13","title":"fido 0.1.13","text":"tons tiny changes prepare version 0.2 (ultimately CRAN) featured changes include: plot coef methods *fit objects now abide CRAN generic naming scheme - may cause problems prior code positional arguments functions now tested using travis integration (vignettes tested due time constraints) merged Kim’s fixes maltipoo code (almost certainly change maltipoo results; bug prior versions) Internally stored mallard mallard_family data now import mallard mallard_family rather importing ps. Solved R CMD CHECK warning. Lots tiny updates documentation","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-0112","dir":"Changelog","previous_headings":"","what":"fido 0.1.12","title":"fido 0.1.12","text":"orthus added jointly fitting multinomial gaussian data (e.g., 16S microbiome metabolomics data)","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-0111","dir":"Changelog","previous_headings":"","what":"fido 0.1.11","title":"fido 0.1.11","text":"Kim fixed windows installation problems (Thanks Kim!) Fixed bug predict effecting ppc Fixed error pars!=NULL summary lambda_to_iqlr now default behavior focus.cov=NULL Fixed issue Xi=NULL pibblefit trying transform small changes make pibble wrapper around c++ functions faster","code":""},{"path":"https://jsilve24.github.io/fido/news/index.html","id":"fido-0110","dir":"Changelog","previous_headings":"","what":"fido 0.1.10","title":"fido 0.1.10","text":"basset added fitting non-linear regression using fido numerous changes make installation easier Added NEWS.md file track changes package.","code":""}]
